// <auto-generated />
using System;
using Logistics.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Logistics.Migrations
{
    [DbContext(typeof(AppDBContext))]
    partial class AppDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Logistics.Data.Account.Models.PendingEmail", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("userid")
                        .HasColumnType("uuid");

                    b.Property<string>("value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("userid");

                    b.ToTable("PendingEmails");
                });

            modelBuilder.Entity("Logistics.Data.Account.Models.Truck", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<float>("heightInMeters")
                        .HasColumnType("real");

                    b.Property<float>("lengthInMeters")
                        .HasColumnType("real");

                    b.Property<int>("loadCapacityInTons")
                        .HasColumnType("integer");

                    b.Property<string>("model")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("regionCode")
                        .HasColumnType("integer");

                    b.Property<Guid>("transporterId")
                        .HasColumnType("uuid");

                    b.Property<int>("truckBrand")
                        .HasColumnType("integer");

                    b.Property<int>("truckType")
                        .HasColumnType("integer");

                    b.Property<float>("widthInMeters")
                        .HasColumnType("real");

                    b.Property<int>("yearOfProduction")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("transporterId")
                        .IsUnique();

                    b.ToTable("Trucks");

                    b.HasData(
                        new
                        {
                            id = new Guid("1ce9a0cc-3292-47a7-b0b4-e5365dfaa603"),
                            heightInMeters = 3f,
                            lengthInMeters = 10f,
                            loadCapacityInTons = 20,
                            model = "5Sjp",
                            number = "A000AA",
                            regionCode = 70,
                            transporterId = new Guid("551ea8b1-747e-46fd-9a34-6e6f74f721bb"),
                            truckBrand = 0,
                            truckType = 1,
                            widthInMeters = 2.5f,
                            yearOfProduction = 1999
                        });
                });

            modelBuilder.Entity("Logistics.Data.Account.Models.User", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("email")
                        .HasColumnType("text");

                    b.Property<string>("fullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("password")
                        .HasColumnType("text");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("photoId")
                        .HasColumnType("uuid");

                    b.Property<int>("role")
                        .HasColumnType("integer");

                    b.Property<string>("token")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("Users");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Logistics.Data.Documents.Models.DriverLicense", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("series")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("transporterId")
                        .HasColumnType("uuid");

                    b.HasKey("id");

                    b.HasIndex("transporterId");

                    b.ToTable("Licenses");

                    b.HasData(
                        new
                        {
                            id = new Guid("1420aab3-6c76-437b-a5c3-333aaa639af3"),
                            number = "540964",
                            series = "5305",
                            transporterId = new Guid("551ea8b1-747e-46fd-9a34-6e6f74f721bb")
                        });
                });

            modelBuilder.Entity("Logistics.Data.Documents.Models.Passport", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("dateOfIssue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("issuedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("series")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("userId")
                        .HasColumnType("uuid");

                    b.HasKey("id");

                    b.HasIndex("userId");

                    b.ToTable("Passports");

                    b.HasData(
                        new
                        {
                            id = new Guid("0ff49b4a-daff-4202-a3e8-5a3e8f23fd6b"),
                            code = "540-345",
                            dateOfIssue = "21.08.2000",
                            issuedBy = "УМВД РОССИИ ПО ТОМСКОЙ ОБЛАСТИ",
                            number = "540964",
                            series = "5305",
                            userId = new Guid("551ea8b1-747e-46fd-9a34-6e6f74f721bb")
                        },
                        new
                        {
                            id = new Guid("d105a3e3-e5e6-4ae3-9682-adc4f5a43426"),
                            code = "540-666",
                            dateOfIssue = "30.10.1991",
                            issuedBy = "УМВД РОССИИ ПО ТОМСКОЙ ОБЛАСТИ",
                            number = "952812",
                            series = "9997",
                            userId = new Guid("2ff859e1-4105-4a14-b24c-32f2f446c24a")
                        });
                });

            modelBuilder.Entity("Logistics.Data.Requests.Models.RejectedRequest", b =>
                {
                    b.Property<Guid>("transporterId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("requestId")
                        .HasColumnType("uuid");

                    b.HasKey("transporterId", "requestId");

                    b.HasIndex("requestId");

                    b.ToTable("RejectedRequests");

                    b.HasData(
                        new
                        {
                            transporterId = new Guid("551ea8b1-747e-46fd-9a34-6e6f74f721bb"),
                            requestId = new Guid("883be808-d7eb-461f-b9e9-984f452618d1")
                        });
                });

            modelBuilder.Entity("Logistics.Data.Requests.Models.Request", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<float>("additionalCostInRubles")
                        .HasColumnType("real");

                    b.Property<DateTime?>("arrivalTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<float>("costInRubles")
                        .HasColumnType("real");

                    b.Property<DateTime>("creationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("loadAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("loadCity")
                        .HasColumnType("integer");

                    b.Property<string>("receiverContacts")
                        .HasColumnType("text");

                    b.Property<string>("receiverFullName")
                        .HasColumnType("text");

                    b.Property<DateTime>("sendingTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("sendingTimeFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("shipperId")
                        .HasColumnType("uuid");

                    b.Property<int>("status")
                        .HasColumnType("integer");

                    b.Property<int>("truckType")
                        .HasColumnType("integer");

                    b.Property<string>("unloadAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("unloadCity")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("shipperId");

                    b.ToTable("Requests");

                    b.HasData(
                        new
                        {
                            id = new Guid("10e0b282-f3a9-4389-90f9-9631b6c9f703"),
                            additionalCostInRubles = 0f,
                            costInRubles = 293750f,
                            creationTime = new DateTime(2025, 1, 13, 12, 27, 0, 442, DateTimeKind.Utc).AddTicks(5590),
                            loadAddress = "ул. Комсомольская, д. 33",
                            loadCity = 0,
                            sendingTime = new DateTime(2025, 1, 15, 16, 7, 0, 442, DateTimeKind.Utc).AddTicks(5595),
                            sendingTimeFrom = new DateTime(2025, 1, 15, 13, 7, 0, 442, DateTimeKind.Utc).AddTicks(5598),
                            shipperId = new Guid("2ff859e1-4105-4a14-b24c-32f2f446c24a"),
                            status = 2,
                            truckType = 1,
                            unloadAddress = "ул. Ленина, д. 55",
                            unloadCity = 2
                        },
                        new
                        {
                            id = new Guid("c45aeff9-d1a8-4142-a0d1-8eebd29b0929"),
                            additionalCostInRubles = 0f,
                            arrivalTime = new DateTime(2025, 1, 12, 13, 7, 0, 442, DateTimeKind.Utc).AddTicks(5634),
                            costInRubles = 293750f,
                            creationTime = new DateTime(2025, 1, 6, 13, 7, 0, 442, DateTimeKind.Utc).AddTicks(5631),
                            loadAddress = "ул. Нахимова, д. 8",
                            loadCity = 0,
                            sendingTime = new DateTime(2025, 1, 6, 16, 7, 0, 442, DateTimeKind.Utc).AddTicks(5633),
                            sendingTimeFrom = new DateTime(2025, 1, 6, 13, 7, 0, 442, DateTimeKind.Utc).AddTicks(5633),
                            shipperId = new Guid("2ff859e1-4105-4a14-b24c-32f2f446c24a"),
                            status = 5,
                            truckType = 1,
                            unloadAddress = "ул. Советская, д. 76",
                            unloadCity = 1
                        },
                        new
                        {
                            id = new Guid("883be808-d7eb-461f-b9e9-984f452618d1"),
                            additionalCostInRubles = 0f,
                            costInRubles = 293750f,
                            creationTime = new DateTime(2025, 1, 6, 13, 7, 0, 442, DateTimeKind.Utc).AddTicks(5637),
                            loadAddress = "ул. Комсомольская, д. 33",
                            loadCity = 0,
                            sendingTime = new DateTime(2025, 1, 16, 13, 7, 0, 442, DateTimeKind.Utc).AddTicks(5638),
                            shipperId = new Guid("2ff859e1-4105-4a14-b24c-32f2f446c24a"),
                            status = 0,
                            truckType = 4,
                            unloadAddress = "ул. Ленина, д. 55",
                            unloadCity = 2
                        },
                        new
                        {
                            id = new Guid("a96d1d36-e374-4e2a-b2f0-86fd89bcc519"),
                            additionalCostInRubles = 0f,
                            costInRubles = 196000f,
                            creationTime = new DateTime(2025, 1, 6, 13, 7, 0, 442, DateTimeKind.Utc).AddTicks(5642),
                            loadAddress = "ул. Комсомольская, д. 33",
                            loadCity = 0,
                            sendingTime = new DateTime(2025, 1, 16, 13, 47, 0, 442, DateTimeKind.Utc).AddTicks(5643),
                            sendingTimeFrom = new DateTime(2025, 1, 16, 13, 7, 0, 442, DateTimeKind.Utc).AddTicks(5643),
                            shipperId = new Guid("2ff859e1-4105-4a14-b24c-32f2f446c24a"),
                            status = 0,
                            truckType = 4,
                            unloadAddress = "ул. Ленина, д. 55",
                            unloadCity = 2
                        },
                        new
                        {
                            id = new Guid("5bc92ceb-97cd-42bd-9dc0-c9b19d909a83"),
                            additionalCostInRubles = 0f,
                            costInRubles = 196000f,
                            creationTime = new DateTime(2025, 1, 6, 13, 7, 0, 442, DateTimeKind.Utc).AddTicks(5646),
                            loadAddress = "ул. Комсомольская, д. 33",
                            loadCity = 0,
                            sendingTime = new DateTime(2025, 1, 16, 13, 47, 0, 442, DateTimeKind.Utc).AddTicks(5647),
                            shipperId = new Guid("2ff859e1-4105-4a14-b24c-32f2f446c24a"),
                            status = 0,
                            truckType = 4,
                            unloadAddress = "ул. Ленина, д. 55",
                            unloadCity = 2
                        },
                        new
                        {
                            id = new Guid("34d15192-2707-4c45-943f-7ea3bc22f886"),
                            additionalCostInRubles = 0f,
                            costInRubles = 196000f,
                            creationTime = new DateTime(2025, 1, 6, 13, 7, 0, 442, DateTimeKind.Utc).AddTicks(5650),
                            loadAddress = "ул. Комсомольская, д. 33",
                            loadCity = 0,
                            sendingTime = new DateTime(2025, 1, 16, 13, 47, 0, 442, DateTimeKind.Utc).AddTicks(5651),
                            shipperId = new Guid("2ff859e1-4105-4a14-b24c-32f2f446c24a"),
                            status = 1,
                            truckType = 4,
                            unloadAddress = "ул. Ленина, д. 55",
                            unloadCity = 2
                        });
                });

            modelBuilder.Entity("Logistics.Data.Requests.Models.Shipment", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<float>("heightInMeters")
                        .HasColumnType("real");

                    b.Property<float>("lengthInMeters")
                        .HasColumnType("real");

                    b.Property<Guid>("requestId")
                        .HasColumnType("uuid");

                    b.Property<int>("type")
                        .HasColumnType("integer");

                    b.Property<float>("weightInTons")
                        .HasColumnType("real");

                    b.Property<float>("widthInMeters")
                        .HasColumnType("real");

                    b.HasKey("id");

                    b.HasIndex("requestId")
                        .IsUnique();

                    b.ToTable("Shipments");

                    b.HasData(
                        new
                        {
                            id = new Guid("4eb23557-b415-409c-8e02-aa9aeb6bd3d5"),
                            heightInMeters = 2f,
                            lengthInMeters = 5f,
                            requestId = new Guid("10e0b282-f3a9-4389-90f9-9631b6c9f703"),
                            type = 1,
                            weightInTons = 5f,
                            widthInMeters = 2f
                        },
                        new
                        {
                            id = new Guid("631057a7-b9b8-42b0-859c-f7abdfa8c9e0"),
                            heightInMeters = 2f,
                            lengthInMeters = 5f,
                            requestId = new Guid("883be808-d7eb-461f-b9e9-984f452618d1"),
                            type = 1,
                            weightInTons = 5f,
                            widthInMeters = 2f
                        },
                        new
                        {
                            id = new Guid("5f96e0dc-45f6-4faf-915a-db3e64096f6e"),
                            heightInMeters = 2f,
                            lengthInMeters = 5f,
                            requestId = new Guid("c45aeff9-d1a8-4142-a0d1-8eebd29b0929"),
                            type = 6,
                            weightInTons = 5f,
                            widthInMeters = 2f
                        },
                        new
                        {
                            id = new Guid("6aab8759-d911-485e-bb33-16e74581cbd7"),
                            heightInMeters = 2f,
                            lengthInMeters = 5f,
                            requestId = new Guid("a96d1d36-e374-4e2a-b2f0-86fd89bcc519"),
                            type = 6,
                            weightInTons = 5f,
                            widthInMeters = 2f
                        },
                        new
                        {
                            id = new Guid("fe8bcac9-738d-4305-b510-330c5e94bcb4"),
                            heightInMeters = 2f,
                            lengthInMeters = 5f,
                            requestId = new Guid("5bc92ceb-97cd-42bd-9dc0-c9b19d909a83"),
                            type = 6,
                            weightInTons = 5f,
                            widthInMeters = 2f
                        },
                        new
                        {
                            id = new Guid("16eeeb98-5480-4142-a248-f1056e6b6cf4"),
                            heightInMeters = 2f,
                            lengthInMeters = 5f,
                            requestId = new Guid("34d15192-2707-4c45-943f-7ea3bc22f886"),
                            type = 6,
                            weightInTons = 5f,
                            widthInMeters = 2f
                        });
                });

            modelBuilder.Entity("Logistics.Data.Transportations.Models.Review", b =>
                {
                    b.Property<Guid>("transportationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("reviewerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("userId")
                        .HasColumnType("uuid");

                    b.Property<string>("value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("transportationId", "reviewerId", "userId");

                    b.HasIndex("userId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Logistics.Data.Transportations.Models.Transportation", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("requestId")
                        .HasColumnType("uuid");

                    b.Property<int>("status")
                        .HasColumnType("integer");

                    b.Property<Guid>("transporterId")
                        .HasColumnType("uuid");

                    b.HasKey("id");

                    b.HasIndex("requestId")
                        .IsUnique();

                    b.HasIndex("transporterId");

                    b.ToTable("Transportations");

                    b.HasData(
                        new
                        {
                            id = new Guid("e6a1a126-72a8-4977-9e24-7b8a276c7b2e"),
                            requestId = new Guid("10e0b282-f3a9-4389-90f9-9631b6c9f703"),
                            status = 2,
                            transporterId = new Guid("551ea8b1-747e-46fd-9a34-6e6f74f721bb")
                        },
                        new
                        {
                            id = new Guid("52dc6a12-f4cb-495f-acfc-26c0e48259f8"),
                            requestId = new Guid("c45aeff9-d1a8-4142-a0d1-8eebd29b0929"),
                            status = 6,
                            transporterId = new Guid("551ea8b1-747e-46fd-9a34-6e6f74f721bb")
                        });
                });

            modelBuilder.Entity("Logistics.Data.Transportations.Models.TransportationStatusChange", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("time")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("transportationId")
                        .HasColumnType("uuid");

                    b.HasKey("id");

                    b.HasIndex("transportationId");

                    b.ToTable("TransportationStatusChanges");

                    b.HasData(
                        new
                        {
                            id = new Guid("7cc22088-9068-43ae-ae3d-b125eac42737"),
                            status = 0,
                            time = new DateTime(2025, 1, 12, 13, 7, 0, 442, DateTimeKind.Utc).AddTicks(5768),
                            transportationId = new Guid("e6a1a126-72a8-4977-9e24-7b8a276c7b2e")
                        },
                        new
                        {
                            id = new Guid("bc154f23-4072-48b4-8bec-0eb0372f2805"),
                            status = 1,
                            time = new DateTime(2025, 1, 13, 9, 7, 0, 442, DateTimeKind.Utc).AddTicks(5770),
                            transportationId = new Guid("e6a1a126-72a8-4977-9e24-7b8a276c7b2e")
                        },
                        new
                        {
                            id = new Guid("0c73878d-c382-4f01-888c-7d6bea29ff28"),
                            status = 2,
                            time = new DateTime(2025, 1, 13, 12, 27, 0, 442, DateTimeKind.Utc).AddTicks(5772),
                            transportationId = new Guid("e6a1a126-72a8-4977-9e24-7b8a276c7b2e")
                        },
                        new
                        {
                            id = new Guid("90b31e34-1f8f-4ec2-86bf-36680c7da8a6"),
                            status = 0,
                            time = new DateTime(2025, 1, 7, 13, 7, 0, 442, DateTimeKind.Utc).AddTicks(5776),
                            transportationId = new Guid("52dc6a12-f4cb-495f-acfc-26c0e48259f8")
                        },
                        new
                        {
                            id = new Guid("d38e64db-3b34-484e-a049-9a5f2dbde991"),
                            status = 1,
                            time = new DateTime(2025, 1, 8, 13, 7, 0, 442, DateTimeKind.Utc).AddTicks(5777),
                            transportationId = new Guid("52dc6a12-f4cb-495f-acfc-26c0e48259f8")
                        },
                        new
                        {
                            id = new Guid("64346a6d-c1e3-4180-a00c-70da1c8b26ba"),
                            status = 2,
                            time = new DateTime(2025, 1, 9, 13, 7, 0, 442, DateTimeKind.Utc).AddTicks(5779),
                            transportationId = new Guid("52dc6a12-f4cb-495f-acfc-26c0e48259f8")
                        },
                        new
                        {
                            id = new Guid("4a91bd25-a53a-4a8d-ab1f-36ad87118632"),
                            status = 3,
                            time = new DateTime(2025, 1, 10, 13, 7, 0, 442, DateTimeKind.Utc).AddTicks(5781),
                            transportationId = new Guid("52dc6a12-f4cb-495f-acfc-26c0e48259f8")
                        },
                        new
                        {
                            id = new Guid("08640e44-d184-4c15-96ae-beff89b41ea4"),
                            status = 4,
                            time = new DateTime(2025, 1, 11, 13, 7, 0, 442, DateTimeKind.Utc).AddTicks(5782),
                            transportationId = new Guid("52dc6a12-f4cb-495f-acfc-26c0e48259f8")
                        },
                        new
                        {
                            id = new Guid("503c855d-43c4-48e8-a0c1-00b24ffd8072"),
                            status = 5,
                            time = new DateTime(2025, 1, 12, 13, 7, 0, 442, DateTimeKind.Utc).AddTicks(5784),
                            transportationId = new Guid("52dc6a12-f4cb-495f-acfc-26c0e48259f8")
                        },
                        new
                        {
                            id = new Guid("fede16f2-a602-4120-b9f9-bf30a7416d27"),
                            status = 6,
                            time = new DateTime(2025, 1, 13, 12, 27, 0, 442, DateTimeKind.Utc).AddTicks(5786),
                            transportationId = new Guid("52dc6a12-f4cb-495f-acfc-26c0e48259f8")
                        });
                });

            modelBuilder.Entity("Logistics.Data.Account.Models.Shipper", b =>
                {
                    b.HasBaseType("Logistics.Data.Account.Models.User");

                    b.ToTable("Shippers");

                    b.HasData(
                        new
                        {
                            id = new Guid("2ff859e1-4105-4a14-b24c-32f2f446c24a"),
                            email = "shipper@gmail.com",
                            fullName = "Семенов Александр Никитич",
                            password = "240BE518FABD2724DDB6F04EEB1DA5967448D7E831C08C8FA822809F74C720A9",
                            phone = "+7 931 555 35 35",
                            role = 0
                        });
                });

            modelBuilder.Entity("Logistics.Data.Account.Models.Transporter", b =>
                {
                    b.HasBaseType("Logistics.Data.Account.Models.User");

                    b.Property<int?>("permanentResidence")
                        .HasColumnType("integer");

                    b.ToTable("Transporters");

                    b.HasData(
                        new
                        {
                            id = new Guid("551ea8b1-747e-46fd-9a34-6e6f74f721bb"),
                            email = "transporter@gmail.com",
                            fullName = "Петров Анатолий Степанович",
                            password = "BDD0E4C431DEF2F5CF7549034C0CB76B0F992F3991F0E6357B542F4B67DBE859",
                            phone = "+7 932 812 96 69",
                            role = 1,
                            permanentResidence = 0
                        });
                });

            modelBuilder.Entity("Logistics.Data.Account.Models.PendingEmail", b =>
                {
                    b.HasOne("Logistics.Data.Account.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("Logistics.Data.Account.Models.Truck", b =>
                {
                    b.HasOne("Logistics.Data.Account.Models.Transporter", null)
                        .WithOne("truck")
                        .HasForeignKey("Logistics.Data.Account.Models.Truck", "transporterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Logistics.Data.Account.Models.User", b =>
                {
                    b.OwnsOne("Logistics.Data.Common.DTOs.Responses.Company", "company", b1 =>
                        {
                            b1.Property<Guid>("Userid")
                                .HasColumnType("uuid");

                            b1.Property<string>("INN")
                                .HasColumnType("text")
                                .HasColumnName("INN");

                            b1.Property<string>("companyName")
                                .HasColumnType("text")
                                .HasColumnName("companyName");

                            b1.Property<int?>("organizationalForm")
                                .HasColumnType("integer")
                                .HasColumnName("organizationalForm");

                            b1.HasKey("Userid");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("Userid");

                            b1.HasData(
                                new
                                {
                                    Userid = new Guid("551ea8b1-747e-46fd-9a34-6e6f74f721bb"),
                                    INN = "345055094345",
                                    organizationalForm = 2
                                },
                                new
                                {
                                    Userid = new Guid("2ff859e1-4105-4a14-b24c-32f2f446c24a"),
                                    INN = "3450550943",
                                    companyName = "Herriot-Watt",
                                    organizationalForm = 0
                                });
                        });

                    b.Navigation("company")
                        .IsRequired();
                });

            modelBuilder.Entity("Logistics.Data.Documents.Models.DriverLicense", b =>
                {
                    b.HasOne("Logistics.Data.Account.Models.Transporter", "transporter")
                        .WithMany()
                        .HasForeignKey("transporterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Logistics.Data.Documents.Models.Scan", "scan", b1 =>
                        {
                            b1.Property<Guid>("DriverLicenseid")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("fileId")
                                .HasColumnType("uuid");

                            b1.Property<string>("fileName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("DriverLicenseid");

                            b1.ToTable("Licenses");

                            b1.WithOwner()
                                .HasForeignKey("DriverLicenseid");
                        });

                    b.Navigation("scan");

                    b.Navigation("transporter");
                });

            modelBuilder.Entity("Logistics.Data.Documents.Models.Passport", b =>
                {
                    b.HasOne("Logistics.Data.Account.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Logistics.Data.Documents.Models.Scan", "scan", b1 =>
                        {
                            b1.Property<Guid>("Passportid")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("fileId")
                                .HasColumnType("uuid");

                            b1.Property<string>("fileName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("Passportid");

                            b1.ToTable("Passports");

                            b1.WithOwner()
                                .HasForeignKey("Passportid");
                        });

                    b.Navigation("scan");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Logistics.Data.Requests.Models.RejectedRequest", b =>
                {
                    b.HasOne("Logistics.Data.Requests.Models.Request", null)
                        .WithMany()
                        .HasForeignKey("requestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Logistics.Data.Account.Models.Transporter", null)
                        .WithMany()
                        .HasForeignKey("transporterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Logistics.Data.Requests.Models.Request", b =>
                {
                    b.HasOne("Logistics.Data.Account.Models.Shipper", "shipper")
                        .WithMany()
                        .HasForeignKey("shipperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("shipper");
                });

            modelBuilder.Entity("Logistics.Data.Requests.Models.Shipment", b =>
                {
                    b.HasOne("Logistics.Data.Requests.Models.Request", null)
                        .WithOne("shipment")
                        .HasForeignKey("Logistics.Data.Requests.Models.Shipment", "requestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Logistics.Data.Transportations.Models.Review", b =>
                {
                    b.HasOne("Logistics.Data.Transportations.Models.Transportation", null)
                        .WithMany()
                        .HasForeignKey("transportationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Logistics.Data.Account.Models.User", null)
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Logistics.Data.Transportations.Models.Transportation", b =>
                {
                    b.HasOne("Logistics.Data.Requests.Models.Request", "request")
                        .WithOne("transportation")
                        .HasForeignKey("Logistics.Data.Transportations.Models.Transportation", "requestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Logistics.Data.Account.Models.Transporter", "transporter")
                        .WithMany()
                        .HasForeignKey("transporterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("request");

                    b.Navigation("transporter");
                });

            modelBuilder.Entity("Logistics.Data.Transportations.Models.TransportationStatusChange", b =>
                {
                    b.HasOne("Logistics.Data.Transportations.Models.Transportation", "transportation")
                        .WithMany()
                        .HasForeignKey("transportationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("transportation");
                });

            modelBuilder.Entity("Logistics.Data.Account.Models.Shipper", b =>
                {
                    b.HasOne("Logistics.Data.Account.Models.User", null)
                        .WithOne()
                        .HasForeignKey("Logistics.Data.Account.Models.Shipper", "id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Logistics.Data.Account.Models.Transporter", b =>
                {
                    b.HasOne("Logistics.Data.Account.Models.User", null)
                        .WithOne()
                        .HasForeignKey("Logistics.Data.Account.Models.Transporter", "id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Logistics.Data.Requests.Models.Request", b =>
                {
                    b.Navigation("shipment")
                        .IsRequired();

                    b.Navigation("transportation");
                });

            modelBuilder.Entity("Logistics.Data.Account.Models.Transporter", b =>
                {
                    b.Navigation("truck");
                });
#pragma warning restore 612, 618
        }
    }
}
