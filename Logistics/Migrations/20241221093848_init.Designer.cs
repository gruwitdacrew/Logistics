// <auto-generated />
using System;
using Logistics.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Logistics.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20241221093848_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Logistics.Data.Account.Models.PendingEmail", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("userid")
                        .HasColumnType("uuid");

                    b.Property<string>("value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("userid");

                    b.ToTable("PendingEmails");
                });

            modelBuilder.Entity("Logistics.Data.Account.Models.Truck", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<float>("heightInMeters")
                        .HasColumnType("real");

                    b.Property<float>("lengthInMeters")
                        .HasColumnType("real");

                    b.Property<int>("loadCapacityInTons")
                        .HasColumnType("integer");

                    b.Property<string>("model")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("regionCode")
                        .HasColumnType("integer");

                    b.Property<Guid>("transporterId")
                        .HasColumnType("uuid");

                    b.Property<int>("truckBrand")
                        .HasColumnType("integer");

                    b.Property<int>("truckType")
                        .HasColumnType("integer");

                    b.Property<float>("widthInMeters")
                        .HasColumnType("real");

                    b.Property<int>("yearOfProduction")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("transporterId")
                        .IsUnique();

                    b.ToTable("Trucks");

                    b.HasData(
                        new
                        {
                            id = new Guid("4e1102ef-33df-470e-ad7a-1e47c72da866"),
                            heightInMeters = 3f,
                            lengthInMeters = 10f,
                            loadCapacityInTons = 20,
                            model = "5Sjp",
                            number = "A000AA",
                            regionCode = 70,
                            transporterId = new Guid("514b897c-c35f-4457-a64f-7d4f5dd97042"),
                            truckBrand = 0,
                            truckType = 1,
                            widthInMeters = 2.5f,
                            yearOfProduction = 1999
                        });
                });

            modelBuilder.Entity("Logistics.Data.Account.Models.User", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("email")
                        .HasColumnType("text");

                    b.Property<string>("fullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("password")
                        .HasColumnType("text");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("photo")
                        .HasColumnType("bytea");

                    b.Property<int>("role")
                        .HasColumnType("integer");

                    b.Property<string>("token")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("Users");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Logistics.Data.Documents.Models.DriverLicense", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("series")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("transporterId")
                        .HasColumnType("uuid");

                    b.HasKey("id");

                    b.HasIndex("transporterId");

                    b.ToTable("Licenses");

                    b.HasData(
                        new
                        {
                            id = new Guid("457fb177-a7f0-4cdb-9165-f8a3009a69d8"),
                            number = "540964",
                            series = "5305",
                            transporterId = new Guid("514b897c-c35f-4457-a64f-7d4f5dd97042")
                        });
                });

            modelBuilder.Entity("Logistics.Data.Documents.Models.Passport", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("dateOfIssue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("issuedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("series")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("userId")
                        .HasColumnType("uuid");

                    b.HasKey("id");

                    b.HasIndex("userId");

                    b.ToTable("Passports");

                    b.HasData(
                        new
                        {
                            id = new Guid("d6cbd007-1b53-4edd-b661-1550c7c00b22"),
                            code = "540-345",
                            dateOfIssue = "21.08.2000",
                            issuedBy = "УМВД РОССИИ ПО ТОМСКОЙ ОБЛАСТИ",
                            number = "540964",
                            series = "5305",
                            userId = new Guid("514b897c-c35f-4457-a64f-7d4f5dd97042")
                        },
                        new
                        {
                            id = new Guid("e38790d3-86ee-48f8-b316-1f08910ba7a6"),
                            code = "540-666",
                            dateOfIssue = "30.10.1991",
                            issuedBy = "УМВД РОССИИ ПО ТОМСКОЙ ОБЛАСТИ",
                            number = "952812",
                            series = "9997",
                            userId = new Guid("1bd32de7-2d90-42f4-9742-39da75455127")
                        });
                });

            modelBuilder.Entity("Logistics.Data.Requests.Models.RejectedRequest", b =>
                {
                    b.Property<Guid>("transporterId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("requestId")
                        .HasColumnType("uuid");

                    b.HasKey("transporterId", "requestId");

                    b.HasIndex("requestId");

                    b.ToTable("RejectedRequests");

                    b.HasData(
                        new
                        {
                            transporterId = new Guid("514b897c-c35f-4457-a64f-7d4f5dd97042"),
                            requestId = new Guid("6db8dd93-54a8-497b-bb63-b9f67de9ed2f")
                        });
                });

            modelBuilder.Entity("Logistics.Data.Requests.Models.Request", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<float>("additionalCostInRubles")
                        .HasColumnType("real");

                    b.Property<DateTime?>("arrivalTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<float>("costInRubles")
                        .HasColumnType("real");

                    b.Property<DateTime>("creationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("loadAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("loadCity")
                        .HasColumnType("integer");

                    b.Property<string>("receiverContacts")
                        .HasColumnType("text");

                    b.Property<string>("receiverFullName")
                        .HasColumnType("text");

                    b.Property<DateTime>("sendingTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("sendingTimeFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("shipperId")
                        .HasColumnType("uuid");

                    b.Property<int>("status")
                        .HasColumnType("integer");

                    b.Property<int>("truckType")
                        .HasColumnType("integer");

                    b.Property<string>("unloadAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("unloadCity")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("shipperId");

                    b.ToTable("Requests");

                    b.HasData(
                        new
                        {
                            id = new Guid("644baa92-de01-49fa-8cb1-29d3497fef99"),
                            additionalCostInRubles = 0f,
                            costInRubles = 293750f,
                            creationTime = new DateTime(2024, 12, 21, 8, 58, 48, 706, DateTimeKind.Utc).AddTicks(2075),
                            loadAddress = "ул. Комсомольская, д. 33",
                            loadCity = 0,
                            sendingTime = new DateTime(2024, 12, 23, 12, 38, 48, 706, DateTimeKind.Utc).AddTicks(2083),
                            sendingTimeFrom = new DateTime(2024, 12, 23, 9, 38, 48, 706, DateTimeKind.Utc).AddTicks(2084),
                            shipperId = new Guid("1bd32de7-2d90-42f4-9742-39da75455127"),
                            status = 2,
                            truckType = 1,
                            unloadAddress = "ул. Ленина, д. 55",
                            unloadCity = 2
                        },
                        new
                        {
                            id = new Guid("2cb17ac5-dc63-4d34-b24f-f38bccb382d4"),
                            additionalCostInRubles = 0f,
                            arrivalTime = new DateTime(2024, 12, 20, 9, 38, 48, 706, DateTimeKind.Utc).AddTicks(2094),
                            costInRubles = 293750f,
                            creationTime = new DateTime(2024, 12, 14, 9, 38, 48, 706, DateTimeKind.Utc).AddTicks(2092),
                            loadAddress = "ул. Нахимова, д. 8",
                            loadCity = 0,
                            sendingTime = new DateTime(2024, 12, 14, 12, 38, 48, 706, DateTimeKind.Utc).AddTicks(2093),
                            sendingTimeFrom = new DateTime(2024, 12, 14, 9, 38, 48, 706, DateTimeKind.Utc).AddTicks(2094),
                            shipperId = new Guid("1bd32de7-2d90-42f4-9742-39da75455127"),
                            status = 5,
                            truckType = 1,
                            unloadAddress = "ул. Советская, д. 76",
                            unloadCity = 1
                        },
                        new
                        {
                            id = new Guid("6db8dd93-54a8-497b-bb63-b9f67de9ed2f"),
                            additionalCostInRubles = 0f,
                            costInRubles = 293750f,
                            creationTime = new DateTime(2024, 12, 14, 9, 38, 48, 706, DateTimeKind.Utc).AddTicks(2097),
                            loadAddress = "ул. Комсомольская, д. 33",
                            loadCity = 0,
                            sendingTime = new DateTime(2024, 12, 24, 9, 38, 48, 706, DateTimeKind.Utc).AddTicks(2098),
                            shipperId = new Guid("1bd32de7-2d90-42f4-9742-39da75455127"),
                            status = 0,
                            truckType = 4,
                            unloadAddress = "ул. Ленина, д. 55",
                            unloadCity = 2
                        },
                        new
                        {
                            id = new Guid("40e1beaa-5130-430a-9f1e-00543bb0ea94"),
                            additionalCostInRubles = 0f,
                            costInRubles = 196000f,
                            creationTime = new DateTime(2024, 12, 14, 9, 38, 48, 706, DateTimeKind.Utc).AddTicks(2102),
                            loadAddress = "ул. Комсомольская, д. 33",
                            loadCity = 0,
                            sendingTime = new DateTime(2024, 12, 24, 10, 18, 48, 706, DateTimeKind.Utc).AddTicks(2103),
                            sendingTimeFrom = new DateTime(2024, 12, 24, 9, 38, 48, 706, DateTimeKind.Utc).AddTicks(2104),
                            shipperId = new Guid("1bd32de7-2d90-42f4-9742-39da75455127"),
                            status = 0,
                            truckType = 4,
                            unloadAddress = "ул. Ленина, д. 55",
                            unloadCity = 2
                        },
                        new
                        {
                            id = new Guid("130846cd-494e-4cd1-b0ad-b9577ecef6d3"),
                            additionalCostInRubles = 0f,
                            costInRubles = 196000f,
                            creationTime = new DateTime(2024, 12, 14, 9, 38, 48, 706, DateTimeKind.Utc).AddTicks(2107),
                            loadAddress = "ул. Комсомольская, д. 33",
                            loadCity = 0,
                            sendingTime = new DateTime(2024, 12, 24, 10, 18, 48, 706, DateTimeKind.Utc).AddTicks(2108),
                            shipperId = new Guid("1bd32de7-2d90-42f4-9742-39da75455127"),
                            status = 0,
                            truckType = 4,
                            unloadAddress = "ул. Ленина, д. 55",
                            unloadCity = 2
                        },
                        new
                        {
                            id = new Guid("e54d1c38-333c-40fe-88b3-f6b0757de3fa"),
                            additionalCostInRubles = 0f,
                            costInRubles = 196000f,
                            creationTime = new DateTime(2024, 12, 14, 9, 38, 48, 706, DateTimeKind.Utc).AddTicks(2110),
                            loadAddress = "ул. Комсомольская, д. 33",
                            loadCity = 0,
                            sendingTime = new DateTime(2024, 12, 24, 10, 18, 48, 706, DateTimeKind.Utc).AddTicks(2111),
                            shipperId = new Guid("1bd32de7-2d90-42f4-9742-39da75455127"),
                            status = 1,
                            truckType = 4,
                            unloadAddress = "ул. Ленина, д. 55",
                            unloadCity = 2
                        });
                });

            modelBuilder.Entity("Logistics.Data.Requests.Models.Shipment", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<float>("heightInMeters")
                        .HasColumnType("real");

                    b.Property<float>("lengthInMeters")
                        .HasColumnType("real");

                    b.Property<Guid>("requestId")
                        .HasColumnType("uuid");

                    b.Property<int>("type")
                        .HasColumnType("integer");

                    b.Property<float>("weightInTons")
                        .HasColumnType("real");

                    b.Property<float>("widthInMeters")
                        .HasColumnType("real");

                    b.HasKey("id");

                    b.HasIndex("requestId")
                        .IsUnique();

                    b.ToTable("Shipments");

                    b.HasData(
                        new
                        {
                            id = new Guid("1744dd03-f3f0-4597-84c3-7e4ce51ee5e2"),
                            heightInMeters = 2f,
                            lengthInMeters = 5f,
                            requestId = new Guid("644baa92-de01-49fa-8cb1-29d3497fef99"),
                            type = 1,
                            weightInTons = 5f,
                            widthInMeters = 2f
                        },
                        new
                        {
                            id = new Guid("ed30d2e3-8cdc-4147-bbe6-26f7618277a9"),
                            heightInMeters = 2f,
                            lengthInMeters = 5f,
                            requestId = new Guid("6db8dd93-54a8-497b-bb63-b9f67de9ed2f"),
                            type = 1,
                            weightInTons = 5f,
                            widthInMeters = 2f
                        },
                        new
                        {
                            id = new Guid("01a75707-137d-4d39-a1d3-01fe3b917d83"),
                            heightInMeters = 2f,
                            lengthInMeters = 5f,
                            requestId = new Guid("2cb17ac5-dc63-4d34-b24f-f38bccb382d4"),
                            type = 6,
                            weightInTons = 5f,
                            widthInMeters = 2f
                        },
                        new
                        {
                            id = new Guid("fd54b173-d029-4ea7-ad10-4e4df73293cf"),
                            heightInMeters = 2f,
                            lengthInMeters = 5f,
                            requestId = new Guid("40e1beaa-5130-430a-9f1e-00543bb0ea94"),
                            type = 6,
                            weightInTons = 5f,
                            widthInMeters = 2f
                        },
                        new
                        {
                            id = new Guid("724c71d5-8cbf-4e13-88f4-61a72380f056"),
                            heightInMeters = 2f,
                            lengthInMeters = 5f,
                            requestId = new Guid("130846cd-494e-4cd1-b0ad-b9577ecef6d3"),
                            type = 6,
                            weightInTons = 5f,
                            widthInMeters = 2f
                        },
                        new
                        {
                            id = new Guid("f82476e6-6d47-4a74-8d33-4aca27263783"),
                            heightInMeters = 2f,
                            lengthInMeters = 5f,
                            requestId = new Guid("e54d1c38-333c-40fe-88b3-f6b0757de3fa"),
                            type = 6,
                            weightInTons = 5f,
                            widthInMeters = 2f
                        });
                });

            modelBuilder.Entity("Logistics.Data.Transportations.Models.Review", b =>
                {
                    b.Property<Guid>("transportationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("reviewerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("userId")
                        .HasColumnType("uuid");

                    b.Property<string>("value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("transportationId", "reviewerId", "userId");

                    b.HasIndex("userId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Logistics.Data.Transportations.Models.Transportation", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("requestId")
                        .HasColumnType("uuid");

                    b.Property<int>("status")
                        .HasColumnType("integer");

                    b.Property<Guid>("transporterId")
                        .HasColumnType("uuid");

                    b.HasKey("id");

                    b.HasIndex("requestId")
                        .IsUnique();

                    b.HasIndex("transporterId");

                    b.ToTable("Transportations");

                    b.HasData(
                        new
                        {
                            id = new Guid("b4e4ed8a-7313-442f-bc38-9cde832fcd5e"),
                            requestId = new Guid("644baa92-de01-49fa-8cb1-29d3497fef99"),
                            status = 2,
                            transporterId = new Guid("514b897c-c35f-4457-a64f-7d4f5dd97042")
                        },
                        new
                        {
                            id = new Guid("92b9b9d9-35a1-4228-aa08-b64dae8e3af8"),
                            requestId = new Guid("2cb17ac5-dc63-4d34-b24f-f38bccb382d4"),
                            status = 6,
                            transporterId = new Guid("514b897c-c35f-4457-a64f-7d4f5dd97042")
                        });
                });

            modelBuilder.Entity("Logistics.Data.Transportations.Models.TransportationStatusChange", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("time")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("transportationId")
                        .HasColumnType("uuid");

                    b.HasKey("id");

                    b.HasIndex("transportationId");

                    b.ToTable("TransportationStatusChanges");

                    b.HasData(
                        new
                        {
                            id = new Guid("5f124dad-2f47-4caf-839b-725808db4d1e"),
                            status = 0,
                            time = new DateTime(2024, 12, 20, 9, 38, 48, 706, DateTimeKind.Utc).AddTicks(2220),
                            transportationId = new Guid("b4e4ed8a-7313-442f-bc38-9cde832fcd5e")
                        },
                        new
                        {
                            id = new Guid("14c61851-9651-496a-9cb5-abac10cf186f"),
                            status = 1,
                            time = new DateTime(2024, 12, 21, 5, 38, 48, 706, DateTimeKind.Utc).AddTicks(2224),
                            transportationId = new Guid("b4e4ed8a-7313-442f-bc38-9cde832fcd5e")
                        },
                        new
                        {
                            id = new Guid("ca806edf-74d8-4bd0-bde0-26c3ab3ad04d"),
                            status = 2,
                            time = new DateTime(2024, 12, 21, 8, 58, 48, 706, DateTimeKind.Utc).AddTicks(2226),
                            transportationId = new Guid("b4e4ed8a-7313-442f-bc38-9cde832fcd5e")
                        },
                        new
                        {
                            id = new Guid("8dc1b823-b7f1-4d42-931b-158833ed8b4a"),
                            status = 0,
                            time = new DateTime(2024, 12, 15, 9, 38, 48, 706, DateTimeKind.Utc).AddTicks(2228),
                            transportationId = new Guid("92b9b9d9-35a1-4228-aa08-b64dae8e3af8")
                        },
                        new
                        {
                            id = new Guid("8dcef863-2ed9-4469-bda1-16a05f8c6949"),
                            status = 1,
                            time = new DateTime(2024, 12, 16, 9, 38, 48, 706, DateTimeKind.Utc).AddTicks(2230),
                            transportationId = new Guid("92b9b9d9-35a1-4228-aa08-b64dae8e3af8")
                        },
                        new
                        {
                            id = new Guid("85895507-2efa-4753-9e8d-085b212fa13a"),
                            status = 2,
                            time = new DateTime(2024, 12, 17, 9, 38, 48, 706, DateTimeKind.Utc).AddTicks(2231),
                            transportationId = new Guid("92b9b9d9-35a1-4228-aa08-b64dae8e3af8")
                        },
                        new
                        {
                            id = new Guid("772746d7-ebf5-486e-8951-7dc062e4e8e9"),
                            status = 3,
                            time = new DateTime(2024, 12, 18, 9, 38, 48, 706, DateTimeKind.Utc).AddTicks(2233),
                            transportationId = new Guid("92b9b9d9-35a1-4228-aa08-b64dae8e3af8")
                        },
                        new
                        {
                            id = new Guid("112a8d6d-1407-4ec5-89f2-936d239d3782"),
                            status = 4,
                            time = new DateTime(2024, 12, 19, 9, 38, 48, 706, DateTimeKind.Utc).AddTicks(2234),
                            transportationId = new Guid("92b9b9d9-35a1-4228-aa08-b64dae8e3af8")
                        },
                        new
                        {
                            id = new Guid("ab49b6c2-893f-412e-8adc-bfacae445da3"),
                            status = 5,
                            time = new DateTime(2024, 12, 20, 9, 38, 48, 706, DateTimeKind.Utc).AddTicks(2236),
                            transportationId = new Guid("92b9b9d9-35a1-4228-aa08-b64dae8e3af8")
                        },
                        new
                        {
                            id = new Guid("3208483a-1f65-40f1-bd3d-e15d73253c92"),
                            status = 6,
                            time = new DateTime(2024, 12, 21, 8, 58, 48, 706, DateTimeKind.Utc).AddTicks(2239),
                            transportationId = new Guid("92b9b9d9-35a1-4228-aa08-b64dae8e3af8")
                        });
                });

            modelBuilder.Entity("Logistics.Data.Account.Models.Shipper", b =>
                {
                    b.HasBaseType("Logistics.Data.Account.Models.User");

                    b.ToTable("Shippers");

                    b.HasData(
                        new
                        {
                            id = new Guid("1bd32de7-2d90-42f4-9742-39da75455127"),
                            email = "shipper@gmail.com",
                            fullName = "Семенов Александр Никитич",
                            password = "240BE518FABD2724DDB6F04EEB1DA5967448D7E831C08C8FA822809F74C720A9",
                            phone = "+7 931 555 35 35",
                            role = 0
                        });
                });

            modelBuilder.Entity("Logistics.Data.Account.Models.Transporter", b =>
                {
                    b.HasBaseType("Logistics.Data.Account.Models.User");

                    b.Property<int?>("permanentResidence")
                        .HasColumnType("integer");

                    b.ToTable("Transporters");

                    b.HasData(
                        new
                        {
                            id = new Guid("514b897c-c35f-4457-a64f-7d4f5dd97042"),
                            email = "transporter@gmail.com",
                            fullName = "Петров Анатолий Степанович",
                            password = "BDD0E4C431DEF2F5CF7549034C0CB76B0F992F3991F0E6357B542F4B67DBE859",
                            phone = "+7 932 812 96 69",
                            role = 1,
                            permanentResidence = 0
                        });
                });

            modelBuilder.Entity("Logistics.Data.Account.Models.PendingEmail", b =>
                {
                    b.HasOne("Logistics.Data.Account.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("Logistics.Data.Account.Models.Truck", b =>
                {
                    b.HasOne("Logistics.Data.Account.Models.Transporter", null)
                        .WithOne("truck")
                        .HasForeignKey("Logistics.Data.Account.Models.Truck", "transporterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Logistics.Data.Account.Models.User", b =>
                {
                    b.OwnsOne("Logistics.Data.Common.DTOs.Responses.Company", "company", b1 =>
                        {
                            b1.Property<Guid>("Userid")
                                .HasColumnType("uuid");

                            b1.Property<string>("INN")
                                .HasColumnType("text")
                                .HasColumnName("INN");

                            b1.Property<string>("companyName")
                                .HasColumnType("text")
                                .HasColumnName("companyName");

                            b1.Property<int?>("organizationalForm")
                                .HasColumnType("integer")
                                .HasColumnName("organizationalForm");

                            b1.HasKey("Userid");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("Userid");

                            b1.HasData(
                                new
                                {
                                    Userid = new Guid("514b897c-c35f-4457-a64f-7d4f5dd97042"),
                                    INN = "345055094345",
                                    organizationalForm = 2
                                },
                                new
                                {
                                    Userid = new Guid("1bd32de7-2d90-42f4-9742-39da75455127"),
                                    INN = "3450550943",
                                    companyName = "Herriot-Watt",
                                    organizationalForm = 0
                                });
                        });

                    b.Navigation("company")
                        .IsRequired();
                });

            modelBuilder.Entity("Logistics.Data.Documents.Models.DriverLicense", b =>
                {
                    b.HasOne("Logistics.Data.Account.Models.Transporter", "transporter")
                        .WithMany()
                        .HasForeignKey("transporterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Logistics.Data.Documents.Models.Scan", "scan", b1 =>
                        {
                            b1.Property<Guid>("DriverLicenseid")
                                .HasColumnType("uuid");

                            b1.Property<byte[]>("data")
                                .IsRequired()
                                .HasColumnType("bytea");

                            b1.Property<string>("fileName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("DriverLicenseid");

                            b1.ToTable("Licenses");

                            b1.WithOwner()
                                .HasForeignKey("DriverLicenseid");
                        });

                    b.Navigation("scan");

                    b.Navigation("transporter");
                });

            modelBuilder.Entity("Logistics.Data.Documents.Models.Passport", b =>
                {
                    b.HasOne("Logistics.Data.Account.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Logistics.Data.Documents.Models.Scan", "scan", b1 =>
                        {
                            b1.Property<Guid>("Passportid")
                                .HasColumnType("uuid");

                            b1.Property<byte[]>("data")
                                .IsRequired()
                                .HasColumnType("bytea");

                            b1.Property<string>("fileName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("Passportid");

                            b1.ToTable("Passports");

                            b1.WithOwner()
                                .HasForeignKey("Passportid");
                        });

                    b.Navigation("scan");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Logistics.Data.Requests.Models.RejectedRequest", b =>
                {
                    b.HasOne("Logistics.Data.Requests.Models.Request", null)
                        .WithMany()
                        .HasForeignKey("requestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Logistics.Data.Account.Models.Transporter", null)
                        .WithMany()
                        .HasForeignKey("transporterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Logistics.Data.Requests.Models.Request", b =>
                {
                    b.HasOne("Logistics.Data.Account.Models.Shipper", "shipper")
                        .WithMany()
                        .HasForeignKey("shipperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("shipper");
                });

            modelBuilder.Entity("Logistics.Data.Requests.Models.Shipment", b =>
                {
                    b.HasOne("Logistics.Data.Requests.Models.Request", null)
                        .WithOne("shipment")
                        .HasForeignKey("Logistics.Data.Requests.Models.Shipment", "requestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Logistics.Data.Transportations.Models.Review", b =>
                {
                    b.HasOne("Logistics.Data.Transportations.Models.Transportation", null)
                        .WithMany()
                        .HasForeignKey("transportationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Logistics.Data.Account.Models.User", null)
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Logistics.Data.Transportations.Models.Transportation", b =>
                {
                    b.HasOne("Logistics.Data.Requests.Models.Request", "request")
                        .WithOne("transportation")
                        .HasForeignKey("Logistics.Data.Transportations.Models.Transportation", "requestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Logistics.Data.Account.Models.Transporter", "transporter")
                        .WithMany()
                        .HasForeignKey("transporterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("request");

                    b.Navigation("transporter");
                });

            modelBuilder.Entity("Logistics.Data.Transportations.Models.TransportationStatusChange", b =>
                {
                    b.HasOne("Logistics.Data.Transportations.Models.Transportation", "transportation")
                        .WithMany()
                        .HasForeignKey("transportationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("transportation");
                });

            modelBuilder.Entity("Logistics.Data.Account.Models.Shipper", b =>
                {
                    b.HasOne("Logistics.Data.Account.Models.User", null)
                        .WithOne()
                        .HasForeignKey("Logistics.Data.Account.Models.Shipper", "id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Logistics.Data.Account.Models.Transporter", b =>
                {
                    b.HasOne("Logistics.Data.Account.Models.User", null)
                        .WithOne()
                        .HasForeignKey("Logistics.Data.Account.Models.Transporter", "id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Logistics.Data.Requests.Models.Request", b =>
                {
                    b.Navigation("shipment")
                        .IsRequired();

                    b.Navigation("transportation");
                });

            modelBuilder.Entity("Logistics.Data.Account.Models.Transporter", b =>
                {
                    b.Navigation("truck");
                });
#pragma warning restore 612, 618
        }
    }
}
