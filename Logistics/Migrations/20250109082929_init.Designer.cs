// <auto-generated />
using System;
using Logistics.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Logistics.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20250109082929_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Logistics.Data.Account.Models.PendingEmail", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("userid")
                        .HasColumnType("uuid");

                    b.Property<string>("value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("userid");

                    b.ToTable("PendingEmails");
                });

            modelBuilder.Entity("Logistics.Data.Account.Models.Truck", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<float>("heightInMeters")
                        .HasColumnType("real");

                    b.Property<float>("lengthInMeters")
                        .HasColumnType("real");

                    b.Property<int>("loadCapacityInTons")
                        .HasColumnType("integer");

                    b.Property<string>("model")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("regionCode")
                        .HasColumnType("integer");

                    b.Property<Guid>("transporterId")
                        .HasColumnType("uuid");

                    b.Property<int>("truckBrand")
                        .HasColumnType("integer");

                    b.Property<int>("truckType")
                        .HasColumnType("integer");

                    b.Property<float>("widthInMeters")
                        .HasColumnType("real");

                    b.Property<int>("yearOfProduction")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("transporterId")
                        .IsUnique();

                    b.ToTable("Trucks");

                    b.HasData(
                        new
                        {
                            id = new Guid("d4d8fd86-a0dc-4850-85ab-59ac23fc86b4"),
                            heightInMeters = 3f,
                            lengthInMeters = 10f,
                            loadCapacityInTons = 20,
                            model = "5Sjp",
                            number = "A000AA",
                            regionCode = 70,
                            transporterId = new Guid("ad00bd02-91cf-49b5-9519-0f75aa6feb19"),
                            truckBrand = 0,
                            truckType = 1,
                            widthInMeters = 2.5f,
                            yearOfProduction = 1999
                        });
                });

            modelBuilder.Entity("Logistics.Data.Account.Models.User", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("email")
                        .HasColumnType("text");

                    b.Property<string>("fullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("password")
                        .HasColumnType("text");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("photo")
                        .HasColumnType("bytea");

                    b.Property<int>("role")
                        .HasColumnType("integer");

                    b.Property<string>("token")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("Users");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Logistics.Data.Documents.Models.DriverLicense", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("series")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("transporterId")
                        .HasColumnType("uuid");

                    b.HasKey("id");

                    b.HasIndex("transporterId");

                    b.ToTable("Licenses");

                    b.HasData(
                        new
                        {
                            id = new Guid("a823874d-9a95-47a2-8db5-95dbdc679a45"),
                            number = "540964",
                            series = "5305",
                            transporterId = new Guid("ad00bd02-91cf-49b5-9519-0f75aa6feb19")
                        });
                });

            modelBuilder.Entity("Logistics.Data.Documents.Models.Passport", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("dateOfIssue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("issuedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("series")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("userId")
                        .HasColumnType("uuid");

                    b.HasKey("id");

                    b.HasIndex("userId");

                    b.ToTable("Passports");

                    b.HasData(
                        new
                        {
                            id = new Guid("ab72c67d-67b9-4c2a-955c-062cf4b7ccc3"),
                            code = "540-345",
                            dateOfIssue = "21.08.2000",
                            issuedBy = "УМВД РОССИИ ПО ТОМСКОЙ ОБЛАСТИ",
                            number = "540964",
                            series = "5305",
                            userId = new Guid("ad00bd02-91cf-49b5-9519-0f75aa6feb19")
                        },
                        new
                        {
                            id = new Guid("7ed61137-76f8-47c4-968f-a7a2d5363b86"),
                            code = "540-666",
                            dateOfIssue = "30.10.1991",
                            issuedBy = "УМВД РОССИИ ПО ТОМСКОЙ ОБЛАСТИ",
                            number = "952812",
                            series = "9997",
                            userId = new Guid("c652f8fd-aa0e-4a91-99b1-199c75dfd8a8")
                        });
                });

            modelBuilder.Entity("Logistics.Data.Requests.Models.RejectedRequest", b =>
                {
                    b.Property<Guid>("transporterId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("requestId")
                        .HasColumnType("uuid");

                    b.HasKey("transporterId", "requestId");

                    b.HasIndex("requestId");

                    b.ToTable("RejectedRequests");

                    b.HasData(
                        new
                        {
                            transporterId = new Guid("ad00bd02-91cf-49b5-9519-0f75aa6feb19"),
                            requestId = new Guid("d6e1d164-2fa4-4902-961e-a134ab0ac947")
                        });
                });

            modelBuilder.Entity("Logistics.Data.Requests.Models.Request", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<float>("additionalCostInRubles")
                        .HasColumnType("real");

                    b.Property<DateTime?>("arrivalTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<float>("costInRubles")
                        .HasColumnType("real");

                    b.Property<DateTime>("creationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("loadAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("loadCity")
                        .HasColumnType("integer");

                    b.Property<string>("receiverContacts")
                        .HasColumnType("text");

                    b.Property<string>("receiverFullName")
                        .HasColumnType("text");

                    b.Property<DateTime>("sendingTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("sendingTimeFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("shipperId")
                        .HasColumnType("uuid");

                    b.Property<int>("status")
                        .HasColumnType("integer");

                    b.Property<int>("truckType")
                        .HasColumnType("integer");

                    b.Property<string>("unloadAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("unloadCity")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("shipperId");

                    b.ToTable("Requests");

                    b.HasData(
                        new
                        {
                            id = new Guid("404a6b20-7b7a-475d-a3ed-241389b84d71"),
                            additionalCostInRubles = 0f,
                            costInRubles = 293750f,
                            creationTime = new DateTime(2025, 1, 9, 7, 49, 28, 296, DateTimeKind.Utc).AddTicks(822),
                            loadAddress = "ул. Комсомольская, д. 33",
                            loadCity = 0,
                            sendingTime = new DateTime(2025, 1, 11, 11, 29, 28, 296, DateTimeKind.Utc).AddTicks(828),
                            sendingTimeFrom = new DateTime(2025, 1, 11, 8, 29, 28, 296, DateTimeKind.Utc).AddTicks(830),
                            shipperId = new Guid("c652f8fd-aa0e-4a91-99b1-199c75dfd8a8"),
                            status = 2,
                            truckType = 1,
                            unloadAddress = "ул. Ленина, д. 55",
                            unloadCity = 2
                        },
                        new
                        {
                            id = new Guid("ab3f99db-9320-4c7d-bac6-878743a4c088"),
                            additionalCostInRubles = 0f,
                            arrivalTime = new DateTime(2025, 1, 8, 8, 29, 28, 296, DateTimeKind.Utc).AddTicks(841),
                            costInRubles = 293750f,
                            creationTime = new DateTime(2025, 1, 2, 8, 29, 28, 296, DateTimeKind.Utc).AddTicks(838),
                            loadAddress = "ул. Нахимова, д. 8",
                            loadCity = 0,
                            sendingTime = new DateTime(2025, 1, 2, 11, 29, 28, 296, DateTimeKind.Utc).AddTicks(840),
                            sendingTimeFrom = new DateTime(2025, 1, 2, 8, 29, 28, 296, DateTimeKind.Utc).AddTicks(840),
                            shipperId = new Guid("c652f8fd-aa0e-4a91-99b1-199c75dfd8a8"),
                            status = 5,
                            truckType = 1,
                            unloadAddress = "ул. Советская, д. 76",
                            unloadCity = 1
                        },
                        new
                        {
                            id = new Guid("d6e1d164-2fa4-4902-961e-a134ab0ac947"),
                            additionalCostInRubles = 0f,
                            costInRubles = 293750f,
                            creationTime = new DateTime(2025, 1, 2, 8, 29, 28, 296, DateTimeKind.Utc).AddTicks(843),
                            loadAddress = "ул. Комсомольская, д. 33",
                            loadCity = 0,
                            sendingTime = new DateTime(2025, 1, 12, 8, 29, 28, 296, DateTimeKind.Utc).AddTicks(844),
                            shipperId = new Guid("c652f8fd-aa0e-4a91-99b1-199c75dfd8a8"),
                            status = 0,
                            truckType = 4,
                            unloadAddress = "ул. Ленина, д. 55",
                            unloadCity = 2
                        },
                        new
                        {
                            id = new Guid("1ac8e0d5-4f7c-41ba-a435-9968daa5c429"),
                            additionalCostInRubles = 0f,
                            costInRubles = 196000f,
                            creationTime = new DateTime(2025, 1, 2, 8, 29, 28, 296, DateTimeKind.Utc).AddTicks(847),
                            loadAddress = "ул. Комсомольская, д. 33",
                            loadCity = 0,
                            sendingTime = new DateTime(2025, 1, 12, 9, 9, 28, 296, DateTimeKind.Utc).AddTicks(848),
                            sendingTimeFrom = new DateTime(2025, 1, 12, 8, 29, 28, 296, DateTimeKind.Utc).AddTicks(849),
                            shipperId = new Guid("c652f8fd-aa0e-4a91-99b1-199c75dfd8a8"),
                            status = 0,
                            truckType = 4,
                            unloadAddress = "ул. Ленина, д. 55",
                            unloadCity = 2
                        },
                        new
                        {
                            id = new Guid("a303c657-df3f-4b83-8055-921adf86c7b7"),
                            additionalCostInRubles = 0f,
                            costInRubles = 196000f,
                            creationTime = new DateTime(2025, 1, 2, 8, 29, 28, 296, DateTimeKind.Utc).AddTicks(852),
                            loadAddress = "ул. Комсомольская, д. 33",
                            loadCity = 0,
                            sendingTime = new DateTime(2025, 1, 12, 9, 9, 28, 296, DateTimeKind.Utc).AddTicks(853),
                            shipperId = new Guid("c652f8fd-aa0e-4a91-99b1-199c75dfd8a8"),
                            status = 0,
                            truckType = 4,
                            unloadAddress = "ул. Ленина, д. 55",
                            unloadCity = 2
                        },
                        new
                        {
                            id = new Guid("5d77b8c9-382b-4b04-8eab-ff14634f447f"),
                            additionalCostInRubles = 0f,
                            costInRubles = 196000f,
                            creationTime = new DateTime(2025, 1, 2, 8, 29, 28, 296, DateTimeKind.Utc).AddTicks(855),
                            loadAddress = "ул. Комсомольская, д. 33",
                            loadCity = 0,
                            sendingTime = new DateTime(2025, 1, 12, 9, 9, 28, 296, DateTimeKind.Utc).AddTicks(856),
                            shipperId = new Guid("c652f8fd-aa0e-4a91-99b1-199c75dfd8a8"),
                            status = 1,
                            truckType = 4,
                            unloadAddress = "ул. Ленина, д. 55",
                            unloadCity = 2
                        });
                });

            modelBuilder.Entity("Logistics.Data.Requests.Models.Shipment", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<float>("heightInMeters")
                        .HasColumnType("real");

                    b.Property<float>("lengthInMeters")
                        .HasColumnType("real");

                    b.Property<Guid>("requestId")
                        .HasColumnType("uuid");

                    b.Property<int>("type")
                        .HasColumnType("integer");

                    b.Property<float>("weightInTons")
                        .HasColumnType("real");

                    b.Property<float>("widthInMeters")
                        .HasColumnType("real");

                    b.HasKey("id");

                    b.HasIndex("requestId")
                        .IsUnique();

                    b.ToTable("Shipments");

                    b.HasData(
                        new
                        {
                            id = new Guid("dc5db599-f3c0-446b-8a16-7baa4842c50a"),
                            heightInMeters = 2f,
                            lengthInMeters = 5f,
                            requestId = new Guid("404a6b20-7b7a-475d-a3ed-241389b84d71"),
                            type = 1,
                            weightInTons = 5f,
                            widthInMeters = 2f
                        },
                        new
                        {
                            id = new Guid("27469b5e-645d-4cbc-a717-bdef5a1bbb06"),
                            heightInMeters = 2f,
                            lengthInMeters = 5f,
                            requestId = new Guid("d6e1d164-2fa4-4902-961e-a134ab0ac947"),
                            type = 1,
                            weightInTons = 5f,
                            widthInMeters = 2f
                        },
                        new
                        {
                            id = new Guid("35f51937-4522-4302-a0b3-011906dac771"),
                            heightInMeters = 2f,
                            lengthInMeters = 5f,
                            requestId = new Guid("ab3f99db-9320-4c7d-bac6-878743a4c088"),
                            type = 6,
                            weightInTons = 5f,
                            widthInMeters = 2f
                        },
                        new
                        {
                            id = new Guid("08159fab-72ca-4933-93f9-0f7c4ba8b801"),
                            heightInMeters = 2f,
                            lengthInMeters = 5f,
                            requestId = new Guid("1ac8e0d5-4f7c-41ba-a435-9968daa5c429"),
                            type = 6,
                            weightInTons = 5f,
                            widthInMeters = 2f
                        },
                        new
                        {
                            id = new Guid("853dea98-37a4-402d-8895-3ee03183542a"),
                            heightInMeters = 2f,
                            lengthInMeters = 5f,
                            requestId = new Guid("a303c657-df3f-4b83-8055-921adf86c7b7"),
                            type = 6,
                            weightInTons = 5f,
                            widthInMeters = 2f
                        },
                        new
                        {
                            id = new Guid("09c2fa8c-6c57-4638-b16b-4f431a114358"),
                            heightInMeters = 2f,
                            lengthInMeters = 5f,
                            requestId = new Guid("5d77b8c9-382b-4b04-8eab-ff14634f447f"),
                            type = 6,
                            weightInTons = 5f,
                            widthInMeters = 2f
                        });
                });

            modelBuilder.Entity("Logistics.Data.Transportations.Models.Review", b =>
                {
                    b.Property<Guid>("transportationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("reviewerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("userId")
                        .HasColumnType("uuid");

                    b.Property<string>("value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("transportationId", "reviewerId", "userId");

                    b.HasIndex("userId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Logistics.Data.Transportations.Models.Transportation", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("requestId")
                        .HasColumnType("uuid");

                    b.Property<int>("status")
                        .HasColumnType("integer");

                    b.Property<Guid>("transporterId")
                        .HasColumnType("uuid");

                    b.HasKey("id");

                    b.HasIndex("requestId")
                        .IsUnique();

                    b.HasIndex("transporterId");

                    b.ToTable("Transportations");

                    b.HasData(
                        new
                        {
                            id = new Guid("e3f4bcc5-6c47-44d7-bd32-a30e2c4f92a4"),
                            requestId = new Guid("404a6b20-7b7a-475d-a3ed-241389b84d71"),
                            status = 2,
                            transporterId = new Guid("ad00bd02-91cf-49b5-9519-0f75aa6feb19")
                        },
                        new
                        {
                            id = new Guid("0fe37385-0d20-4c5a-be16-54564f72b569"),
                            requestId = new Guid("ab3f99db-9320-4c7d-bac6-878743a4c088"),
                            status = 6,
                            transporterId = new Guid("ad00bd02-91cf-49b5-9519-0f75aa6feb19")
                        });
                });

            modelBuilder.Entity("Logistics.Data.Transportations.Models.TransportationStatusChange", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("time")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("transportationId")
                        .HasColumnType("uuid");

                    b.HasKey("id");

                    b.HasIndex("transportationId");

                    b.ToTable("TransportationStatusChanges");

                    b.HasData(
                        new
                        {
                            id = new Guid("72bee96c-9740-4327-b354-6fb0681e80ae"),
                            status = 0,
                            time = new DateTime(2025, 1, 8, 8, 29, 28, 296, DateTimeKind.Utc).AddTicks(965),
                            transportationId = new Guid("e3f4bcc5-6c47-44d7-bd32-a30e2c4f92a4")
                        },
                        new
                        {
                            id = new Guid("3bbd5318-4ff7-4940-8eb9-38ef358195c0"),
                            status = 1,
                            time = new DateTime(2025, 1, 9, 4, 29, 28, 296, DateTimeKind.Utc).AddTicks(967),
                            transportationId = new Guid("e3f4bcc5-6c47-44d7-bd32-a30e2c4f92a4")
                        },
                        new
                        {
                            id = new Guid("f745d5b5-d6f1-4908-90a7-c891cfd82d78"),
                            status = 2,
                            time = new DateTime(2025, 1, 9, 7, 49, 28, 296, DateTimeKind.Utc).AddTicks(971),
                            transportationId = new Guid("e3f4bcc5-6c47-44d7-bd32-a30e2c4f92a4")
                        },
                        new
                        {
                            id = new Guid("dc7298ac-a16a-4742-8483-5c7b5c628308"),
                            status = 0,
                            time = new DateTime(2025, 1, 3, 8, 29, 28, 296, DateTimeKind.Utc).AddTicks(972),
                            transportationId = new Guid("0fe37385-0d20-4c5a-be16-54564f72b569")
                        },
                        new
                        {
                            id = new Guid("d618eef5-087a-4cc3-8cc6-0bdd5187935f"),
                            status = 1,
                            time = new DateTime(2025, 1, 4, 8, 29, 28, 296, DateTimeKind.Utc).AddTicks(974),
                            transportationId = new Guid("0fe37385-0d20-4c5a-be16-54564f72b569")
                        },
                        new
                        {
                            id = new Guid("7f1b9170-7488-406b-bc3c-397923023383"),
                            status = 2,
                            time = new DateTime(2025, 1, 5, 8, 29, 28, 296, DateTimeKind.Utc).AddTicks(975),
                            transportationId = new Guid("0fe37385-0d20-4c5a-be16-54564f72b569")
                        },
                        new
                        {
                            id = new Guid("72b6ea99-c58b-449a-85b9-c4bbdcb11bc3"),
                            status = 3,
                            time = new DateTime(2025, 1, 6, 8, 29, 28, 296, DateTimeKind.Utc).AddTicks(977),
                            transportationId = new Guid("0fe37385-0d20-4c5a-be16-54564f72b569")
                        },
                        new
                        {
                            id = new Guid("3a33e845-44c4-490f-90e1-5552fe5b64f7"),
                            status = 4,
                            time = new DateTime(2025, 1, 7, 8, 29, 28, 296, DateTimeKind.Utc).AddTicks(979),
                            transportationId = new Guid("0fe37385-0d20-4c5a-be16-54564f72b569")
                        },
                        new
                        {
                            id = new Guid("1382bc15-c122-44a4-98e9-91c5e7a94a8a"),
                            status = 5,
                            time = new DateTime(2025, 1, 8, 8, 29, 28, 296, DateTimeKind.Utc).AddTicks(980),
                            transportationId = new Guid("0fe37385-0d20-4c5a-be16-54564f72b569")
                        },
                        new
                        {
                            id = new Guid("4985675a-710c-4f35-a02c-3cd0eb8cb9c8"),
                            status = 6,
                            time = new DateTime(2025, 1, 9, 7, 49, 28, 296, DateTimeKind.Utc).AddTicks(982),
                            transportationId = new Guid("0fe37385-0d20-4c5a-be16-54564f72b569")
                        });
                });

            modelBuilder.Entity("Logistics.Data.Account.Models.Shipper", b =>
                {
                    b.HasBaseType("Logistics.Data.Account.Models.User");

                    b.ToTable("Shippers");

                    b.HasData(
                        new
                        {
                            id = new Guid("c652f8fd-aa0e-4a91-99b1-199c75dfd8a8"),
                            email = "shipper@gmail.com",
                            fullName = "Семенов Александр Никитич",
                            password = "240BE518FABD2724DDB6F04EEB1DA5967448D7E831C08C8FA822809F74C720A9",
                            phone = "+7 931 555 35 35",
                            role = 0
                        });
                });

            modelBuilder.Entity("Logistics.Data.Account.Models.Transporter", b =>
                {
                    b.HasBaseType("Logistics.Data.Account.Models.User");

                    b.Property<int?>("permanentResidence")
                        .HasColumnType("integer");

                    b.ToTable("Transporters");

                    b.HasData(
                        new
                        {
                            id = new Guid("ad00bd02-91cf-49b5-9519-0f75aa6feb19"),
                            email = "transporter@gmail.com",
                            fullName = "Петров Анатолий Степанович",
                            password = "BDD0E4C431DEF2F5CF7549034C0CB76B0F992F3991F0E6357B542F4B67DBE859",
                            phone = "+7 932 812 96 69",
                            role = 1,
                            permanentResidence = 0
                        });
                });

            modelBuilder.Entity("Logistics.Data.Account.Models.PendingEmail", b =>
                {
                    b.HasOne("Logistics.Data.Account.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("Logistics.Data.Account.Models.Truck", b =>
                {
                    b.HasOne("Logistics.Data.Account.Models.Transporter", null)
                        .WithOne("truck")
                        .HasForeignKey("Logistics.Data.Account.Models.Truck", "transporterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Logistics.Data.Account.Models.User", b =>
                {
                    b.OwnsOne("Logistics.Data.Common.DTOs.Responses.Company", "company", b1 =>
                        {
                            b1.Property<Guid>("Userid")
                                .HasColumnType("uuid");

                            b1.Property<string>("INN")
                                .HasColumnType("text")
                                .HasColumnName("INN");

                            b1.Property<string>("companyName")
                                .HasColumnType("text")
                                .HasColumnName("companyName");

                            b1.Property<int?>("organizationalForm")
                                .HasColumnType("integer")
                                .HasColumnName("organizationalForm");

                            b1.HasKey("Userid");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("Userid");

                            b1.HasData(
                                new
                                {
                                    Userid = new Guid("ad00bd02-91cf-49b5-9519-0f75aa6feb19"),
                                    INN = "345055094345",
                                    organizationalForm = 2
                                },
                                new
                                {
                                    Userid = new Guid("c652f8fd-aa0e-4a91-99b1-199c75dfd8a8"),
                                    INN = "3450550943",
                                    companyName = "Herriot-Watt",
                                    organizationalForm = 0
                                });
                        });

                    b.Navigation("company")
                        .IsRequired();
                });

            modelBuilder.Entity("Logistics.Data.Documents.Models.DriverLicense", b =>
                {
                    b.HasOne("Logistics.Data.Account.Models.Transporter", "transporter")
                        .WithMany()
                        .HasForeignKey("transporterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Logistics.Data.Documents.Models.Scan", "scan", b1 =>
                        {
                            b1.Property<Guid>("DriverLicenseid")
                                .HasColumnType("uuid");

                            b1.Property<byte[]>("data")
                                .IsRequired()
                                .HasColumnType("bytea");

                            b1.Property<string>("fileName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("DriverLicenseid");

                            b1.ToTable("Licenses");

                            b1.WithOwner()
                                .HasForeignKey("DriverLicenseid");
                        });

                    b.Navigation("scan");

                    b.Navigation("transporter");
                });

            modelBuilder.Entity("Logistics.Data.Documents.Models.Passport", b =>
                {
                    b.HasOne("Logistics.Data.Account.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Logistics.Data.Documents.Models.Scan", "scan", b1 =>
                        {
                            b1.Property<Guid>("Passportid")
                                .HasColumnType("uuid");

                            b1.Property<byte[]>("data")
                                .IsRequired()
                                .HasColumnType("bytea");

                            b1.Property<string>("fileName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("Passportid");

                            b1.ToTable("Passports");

                            b1.WithOwner()
                                .HasForeignKey("Passportid");
                        });

                    b.Navigation("scan");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Logistics.Data.Requests.Models.RejectedRequest", b =>
                {
                    b.HasOne("Logistics.Data.Requests.Models.Request", null)
                        .WithMany()
                        .HasForeignKey("requestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Logistics.Data.Account.Models.Transporter", null)
                        .WithMany()
                        .HasForeignKey("transporterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Logistics.Data.Requests.Models.Request", b =>
                {
                    b.HasOne("Logistics.Data.Account.Models.Shipper", "shipper")
                        .WithMany()
                        .HasForeignKey("shipperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("shipper");
                });

            modelBuilder.Entity("Logistics.Data.Requests.Models.Shipment", b =>
                {
                    b.HasOne("Logistics.Data.Requests.Models.Request", null)
                        .WithOne("shipment")
                        .HasForeignKey("Logistics.Data.Requests.Models.Shipment", "requestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Logistics.Data.Transportations.Models.Review", b =>
                {
                    b.HasOne("Logistics.Data.Transportations.Models.Transportation", null)
                        .WithMany()
                        .HasForeignKey("transportationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Logistics.Data.Account.Models.User", null)
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Logistics.Data.Transportations.Models.Transportation", b =>
                {
                    b.HasOne("Logistics.Data.Requests.Models.Request", "request")
                        .WithOne("transportation")
                        .HasForeignKey("Logistics.Data.Transportations.Models.Transportation", "requestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Logistics.Data.Account.Models.Transporter", "transporter")
                        .WithMany()
                        .HasForeignKey("transporterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("request");

                    b.Navigation("transporter");
                });

            modelBuilder.Entity("Logistics.Data.Transportations.Models.TransportationStatusChange", b =>
                {
                    b.HasOne("Logistics.Data.Transportations.Models.Transportation", "transportation")
                        .WithMany()
                        .HasForeignKey("transportationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("transportation");
                });

            modelBuilder.Entity("Logistics.Data.Account.Models.Shipper", b =>
                {
                    b.HasOne("Logistics.Data.Account.Models.User", null)
                        .WithOne()
                        .HasForeignKey("Logistics.Data.Account.Models.Shipper", "id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Logistics.Data.Account.Models.Transporter", b =>
                {
                    b.HasOne("Logistics.Data.Account.Models.User", null)
                        .WithOne()
                        .HasForeignKey("Logistics.Data.Account.Models.Transporter", "id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Logistics.Data.Requests.Models.Request", b =>
                {
                    b.Navigation("shipment")
                        .IsRequired();

                    b.Navigation("transportation");
                });

            modelBuilder.Entity("Logistics.Data.Account.Models.Transporter", b =>
                {
                    b.Navigation("truck");
                });
#pragma warning restore 612, 618
        }
    }
}
