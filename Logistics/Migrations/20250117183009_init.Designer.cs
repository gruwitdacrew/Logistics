// <auto-generated />
using System;
using Logistics.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Logistics.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20250117183009_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Logistics.Data.Account.Models.PendingEmail", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("userid")
                        .HasColumnType("uuid");

                    b.Property<string>("value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("userid");

                    b.ToTable("PendingEmails");
                });

            modelBuilder.Entity("Logistics.Data.Account.Models.Truck", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<float>("heightInMeters")
                        .HasColumnType("real");

                    b.Property<float>("lengthInMeters")
                        .HasColumnType("real");

                    b.Property<int>("loadCapacityInTons")
                        .HasColumnType("integer");

                    b.Property<string>("model")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("regionCode")
                        .HasColumnType("integer");

                    b.Property<Guid>("transporterId")
                        .HasColumnType("uuid");

                    b.Property<int>("truckBrand")
                        .HasColumnType("integer");

                    b.Property<int>("truckType")
                        .HasColumnType("integer");

                    b.Property<float>("widthInMeters")
                        .HasColumnType("real");

                    b.Property<int>("yearOfProduction")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("transporterId")
                        .IsUnique();

                    b.ToTable("Trucks");

                    b.HasData(
                        new
                        {
                            id = new Guid("aba1a0d7-61b9-46c6-aa74-2cb98059f948"),
                            heightInMeters = 3f,
                            lengthInMeters = 10f,
                            loadCapacityInTons = 20,
                            model = "5Sjp",
                            number = "A000AA",
                            regionCode = 70,
                            transporterId = new Guid("015833d6-dbbf-405e-9479-8fe3ae959a28"),
                            truckBrand = 0,
                            truckType = 1,
                            widthInMeters = 2.5f,
                            yearOfProduction = 1999
                        });
                });

            modelBuilder.Entity("Logistics.Data.Account.Models.User", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("email")
                        .HasColumnType("text");

                    b.Property<string>("fullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("password")
                        .HasColumnType("text");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("photoId")
                        .HasColumnType("uuid");

                    b.Property<int>("role")
                        .HasColumnType("integer");

                    b.Property<string>("token")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("Users");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Logistics.Data.Documents.Models.DriverLicense", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("series")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("transporterId")
                        .HasColumnType("uuid");

                    b.HasKey("id");

                    b.HasIndex("transporterId");

                    b.ToTable("Licenses");

                    b.HasData(
                        new
                        {
                            id = new Guid("2bdf9ccd-9059-492a-9554-cbae8d0bb92c"),
                            number = "540964",
                            series = "5305",
                            transporterId = new Guid("015833d6-dbbf-405e-9479-8fe3ae959a28")
                        });
                });

            modelBuilder.Entity("Logistics.Data.Documents.Models.Passport", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("dateOfIssue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("issuedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("series")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("userId")
                        .HasColumnType("uuid");

                    b.HasKey("id");

                    b.HasIndex("userId");

                    b.ToTable("Passports");

                    b.HasData(
                        new
                        {
                            id = new Guid("28732ac2-8351-47f7-b92e-861a962ef56f"),
                            code = "540-345",
                            dateOfIssue = "21.08.2000",
                            issuedBy = "УМВД РОССИИ ПО ТОМСКОЙ ОБЛАСТИ",
                            number = "540964",
                            series = "5305",
                            userId = new Guid("015833d6-dbbf-405e-9479-8fe3ae959a28")
                        },
                        new
                        {
                            id = new Guid("0654bd9b-4bee-4134-993a-f96e14a344fc"),
                            code = "540-666",
                            dateOfIssue = "30.10.1991",
                            issuedBy = "УМВД РОССИИ ПО ТОМСКОЙ ОБЛАСТИ",
                            number = "952812",
                            series = "9997",
                            userId = new Guid("fb17c769-149d-4e2c-b386-73aa6abde8ad")
                        });
                });

            modelBuilder.Entity("Logistics.Data.Requests.Models.RejectedRequest", b =>
                {
                    b.Property<Guid>("transporterId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("requestId")
                        .HasColumnType("uuid");

                    b.HasKey("transporterId", "requestId");

                    b.HasIndex("requestId");

                    b.ToTable("RejectedRequests");

                    b.HasData(
                        new
                        {
                            transporterId = new Guid("015833d6-dbbf-405e-9479-8fe3ae959a28"),
                            requestId = new Guid("d3316acf-7462-4fa3-9e9c-e5922eed5985")
                        });
                });

            modelBuilder.Entity("Logistics.Data.Requests.Models.Request", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<float>("additionalCostInRubles")
                        .HasColumnType("real");

                    b.Property<DateTime?>("arrivalTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<float>("costInRubles")
                        .HasColumnType("real");

                    b.Property<DateTime>("creationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("loadAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("loadCity")
                        .HasColumnType("integer");

                    b.Property<string>("receiverContacts")
                        .HasColumnType("text");

                    b.Property<string>("receiverFullName")
                        .HasColumnType("text");

                    b.Property<DateTime>("sendingTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("sendingTimeFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("shipperId")
                        .HasColumnType("uuid");

                    b.Property<int>("status")
                        .HasColumnType("integer");

                    b.Property<int>("truckType")
                        .HasColumnType("integer");

                    b.Property<string>("unloadAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("unloadCity")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("shipperId");

                    b.ToTable("Requests");

                    b.HasData(
                        new
                        {
                            id = new Guid("a328fa87-c15f-4de3-8198-2c9f108bd35e"),
                            additionalCostInRubles = 0f,
                            costInRubles = 293750f,
                            creationTime = new DateTime(2025, 1, 17, 17, 50, 8, 576, DateTimeKind.Utc).AddTicks(3354),
                            loadAddress = "ул. Комсомольская, д. 33",
                            loadCity = 0,
                            sendingTime = new DateTime(2025, 1, 19, 21, 30, 8, 576, DateTimeKind.Utc).AddTicks(3360),
                            sendingTimeFrom = new DateTime(2025, 1, 19, 18, 30, 8, 576, DateTimeKind.Utc).AddTicks(3362),
                            shipperId = new Guid("fb17c769-149d-4e2c-b386-73aa6abde8ad"),
                            status = 2,
                            truckType = 1,
                            unloadAddress = "ул. Ленина, д. 55",
                            unloadCity = 2
                        },
                        new
                        {
                            id = new Guid("6b5a6b7b-3e7d-40d2-9531-42e70d2ad3c4"),
                            additionalCostInRubles = 0f,
                            arrivalTime = new DateTime(2025, 1, 16, 18, 30, 8, 576, DateTimeKind.Utc).AddTicks(3382),
                            costInRubles = 293750f,
                            creationTime = new DateTime(2025, 1, 10, 18, 30, 8, 576, DateTimeKind.Utc).AddTicks(3379),
                            loadAddress = "ул. Нахимова, д. 8",
                            loadCity = 0,
                            sendingTime = new DateTime(2025, 1, 10, 21, 30, 8, 576, DateTimeKind.Utc).AddTicks(3381),
                            sendingTimeFrom = new DateTime(2025, 1, 10, 18, 30, 8, 576, DateTimeKind.Utc).AddTicks(3382),
                            shipperId = new Guid("fb17c769-149d-4e2c-b386-73aa6abde8ad"),
                            status = 5,
                            truckType = 1,
                            unloadAddress = "ул. Советская, д. 76",
                            unloadCity = 1
                        },
                        new
                        {
                            id = new Guid("d3316acf-7462-4fa3-9e9c-e5922eed5985"),
                            additionalCostInRubles = 0f,
                            costInRubles = 293750f,
                            creationTime = new DateTime(2025, 1, 10, 18, 30, 8, 576, DateTimeKind.Utc).AddTicks(3385),
                            loadAddress = "ул. Комсомольская, д. 33",
                            loadCity = 0,
                            sendingTime = new DateTime(2025, 1, 20, 18, 30, 8, 576, DateTimeKind.Utc).AddTicks(3387),
                            shipperId = new Guid("fb17c769-149d-4e2c-b386-73aa6abde8ad"),
                            status = 0,
                            truckType = 4,
                            unloadAddress = "ул. Ленина, д. 55",
                            unloadCity = 2
                        },
                        new
                        {
                            id = new Guid("ac165515-d588-4b54-a6c8-bd95eda93539"),
                            additionalCostInRubles = 0f,
                            costInRubles = 196000f,
                            creationTime = new DateTime(2025, 1, 10, 18, 30, 8, 576, DateTimeKind.Utc).AddTicks(3391),
                            loadAddress = "ул. Комсомольская, д. 33",
                            loadCity = 0,
                            sendingTime = new DateTime(2025, 1, 20, 19, 10, 8, 576, DateTimeKind.Utc).AddTicks(3392),
                            sendingTimeFrom = new DateTime(2025, 1, 20, 18, 30, 8, 576, DateTimeKind.Utc).AddTicks(3393),
                            shipperId = new Guid("fb17c769-149d-4e2c-b386-73aa6abde8ad"),
                            status = 0,
                            truckType = 4,
                            unloadAddress = "ул. Ленина, д. 55",
                            unloadCity = 2
                        },
                        new
                        {
                            id = new Guid("194c7df6-1bfc-4edb-9921-7c5048946aef"),
                            additionalCostInRubles = 0f,
                            costInRubles = 196000f,
                            creationTime = new DateTime(2025, 1, 10, 18, 30, 8, 576, DateTimeKind.Utc).AddTicks(3396),
                            loadAddress = "ул. Комсомольская, д. 33",
                            loadCity = 0,
                            sendingTime = new DateTime(2025, 1, 20, 19, 10, 8, 576, DateTimeKind.Utc).AddTicks(3397),
                            shipperId = new Guid("fb17c769-149d-4e2c-b386-73aa6abde8ad"),
                            status = 0,
                            truckType = 4,
                            unloadAddress = "ул. Ленина, д. 55",
                            unloadCity = 2
                        },
                        new
                        {
                            id = new Guid("398d9ab7-8b9d-4319-8378-6dd30ad9894a"),
                            additionalCostInRubles = 0f,
                            costInRubles = 196000f,
                            creationTime = new DateTime(2025, 1, 10, 18, 30, 8, 576, DateTimeKind.Utc).AddTicks(3400),
                            loadAddress = "ул. Комсомольская, д. 33",
                            loadCity = 0,
                            sendingTime = new DateTime(2025, 1, 20, 19, 10, 8, 576, DateTimeKind.Utc).AddTicks(3401),
                            shipperId = new Guid("fb17c769-149d-4e2c-b386-73aa6abde8ad"),
                            status = 1,
                            truckType = 4,
                            unloadAddress = "ул. Ленина, д. 55",
                            unloadCity = 2
                        });
                });

            modelBuilder.Entity("Logistics.Data.Requests.Models.Shipment", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<float>("heightInMeters")
                        .HasColumnType("real");

                    b.Property<float>("lengthInMeters")
                        .HasColumnType("real");

                    b.Property<Guid>("requestId")
                        .HasColumnType("uuid");

                    b.Property<int>("type")
                        .HasColumnType("integer");

                    b.Property<float>("weightInTons")
                        .HasColumnType("real");

                    b.Property<float>("widthInMeters")
                        .HasColumnType("real");

                    b.HasKey("id");

                    b.HasIndex("requestId")
                        .IsUnique();

                    b.ToTable("Shipments");

                    b.HasData(
                        new
                        {
                            id = new Guid("aeeba33c-ebbf-4691-bda7-6f60434b0b06"),
                            heightInMeters = 2f,
                            lengthInMeters = 5f,
                            requestId = new Guid("a328fa87-c15f-4de3-8198-2c9f108bd35e"),
                            type = 1,
                            weightInTons = 5f,
                            widthInMeters = 2f
                        },
                        new
                        {
                            id = new Guid("5bcb239a-d497-4d98-8691-098813830371"),
                            heightInMeters = 2f,
                            lengthInMeters = 5f,
                            requestId = new Guid("d3316acf-7462-4fa3-9e9c-e5922eed5985"),
                            type = 1,
                            weightInTons = 5f,
                            widthInMeters = 2f
                        },
                        new
                        {
                            id = new Guid("78cddb33-52fc-4ec7-b584-cb1cec902f5e"),
                            heightInMeters = 2f,
                            lengthInMeters = 5f,
                            requestId = new Guid("6b5a6b7b-3e7d-40d2-9531-42e70d2ad3c4"),
                            type = 6,
                            weightInTons = 5f,
                            widthInMeters = 2f
                        },
                        new
                        {
                            id = new Guid("b2daa6bb-70e2-4582-94bd-b53074579fb1"),
                            heightInMeters = 2f,
                            lengthInMeters = 5f,
                            requestId = new Guid("ac165515-d588-4b54-a6c8-bd95eda93539"),
                            type = 6,
                            weightInTons = 5f,
                            widthInMeters = 2f
                        },
                        new
                        {
                            id = new Guid("7495fe7c-578f-44dc-a35f-13a8d092b171"),
                            heightInMeters = 2f,
                            lengthInMeters = 5f,
                            requestId = new Guid("194c7df6-1bfc-4edb-9921-7c5048946aef"),
                            type = 6,
                            weightInTons = 5f,
                            widthInMeters = 2f
                        },
                        new
                        {
                            id = new Guid("49cb99f5-0e23-4c08-82f2-38ef97bd5970"),
                            heightInMeters = 2f,
                            lengthInMeters = 5f,
                            requestId = new Guid("398d9ab7-8b9d-4319-8378-6dd30ad9894a"),
                            type = 6,
                            weightInTons = 5f,
                            widthInMeters = 2f
                        });
                });

            modelBuilder.Entity("Logistics.Data.Transportations.Models.Review", b =>
                {
                    b.Property<Guid>("transportationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("reviewerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("userId")
                        .HasColumnType("uuid");

                    b.Property<string>("value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("transportationId", "reviewerId", "userId");

                    b.HasIndex("userId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Logistics.Data.Transportations.Models.Transportation", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("requestId")
                        .HasColumnType("uuid");

                    b.Property<int>("status")
                        .HasColumnType("integer");

                    b.Property<Guid>("transporterId")
                        .HasColumnType("uuid");

                    b.HasKey("id");

                    b.HasIndex("requestId")
                        .IsUnique();

                    b.HasIndex("transporterId");

                    b.ToTable("Transportations");

                    b.HasData(
                        new
                        {
                            id = new Guid("0e1a5053-4a1c-4794-8f64-d00acf04a016"),
                            requestId = new Guid("a328fa87-c15f-4de3-8198-2c9f108bd35e"),
                            status = 2,
                            transporterId = new Guid("015833d6-dbbf-405e-9479-8fe3ae959a28")
                        },
                        new
                        {
                            id = new Guid("f3f4c557-36a5-4be5-92fa-09ad9031bd84"),
                            requestId = new Guid("6b5a6b7b-3e7d-40d2-9531-42e70d2ad3c4"),
                            status = 6,
                            transporterId = new Guid("015833d6-dbbf-405e-9479-8fe3ae959a28")
                        });
                });

            modelBuilder.Entity("Logistics.Data.Transportations.Models.TransportationStatusChange", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("time")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("transportationId")
                        .HasColumnType("uuid");

                    b.HasKey("id");

                    b.HasIndex("transportationId");

                    b.ToTable("TransportationStatusChanges");

                    b.HasData(
                        new
                        {
                            id = new Guid("9cb06eaa-2b7c-4fcd-a897-b35fb0ef1032"),
                            status = 0,
                            time = new DateTime(2025, 1, 16, 18, 30, 8, 576, DateTimeKind.Utc).AddTicks(3525),
                            transportationId = new Guid("0e1a5053-4a1c-4794-8f64-d00acf04a016")
                        },
                        new
                        {
                            id = new Guid("ddd753b5-1a38-4e99-8818-2b005fbd011a"),
                            status = 1,
                            time = new DateTime(2025, 1, 17, 14, 30, 8, 576, DateTimeKind.Utc).AddTicks(3528),
                            transportationId = new Guid("0e1a5053-4a1c-4794-8f64-d00acf04a016")
                        },
                        new
                        {
                            id = new Guid("956307dd-3cac-4ec3-ac54-38d8ed66e0cc"),
                            status = 2,
                            time = new DateTime(2025, 1, 17, 17, 50, 8, 576, DateTimeKind.Utc).AddTicks(3530),
                            transportationId = new Guid("0e1a5053-4a1c-4794-8f64-d00acf04a016")
                        },
                        new
                        {
                            id = new Guid("e83b88c8-1a4f-41b5-ba7f-27dff3e8de7e"),
                            status = 0,
                            time = new DateTime(2025, 1, 11, 18, 30, 8, 576, DateTimeKind.Utc).AddTicks(3533),
                            transportationId = new Guid("f3f4c557-36a5-4be5-92fa-09ad9031bd84")
                        },
                        new
                        {
                            id = new Guid("5a01db1c-5f7a-44d5-afe3-c96e5c052fe2"),
                            status = 1,
                            time = new DateTime(2025, 1, 12, 18, 30, 8, 576, DateTimeKind.Utc).AddTicks(3535),
                            transportationId = new Guid("f3f4c557-36a5-4be5-92fa-09ad9031bd84")
                        },
                        new
                        {
                            id = new Guid("1de5b4ee-9867-439d-be52-00eec2a2176c"),
                            status = 2,
                            time = new DateTime(2025, 1, 13, 18, 30, 8, 576, DateTimeKind.Utc).AddTicks(3537),
                            transportationId = new Guid("f3f4c557-36a5-4be5-92fa-09ad9031bd84")
                        },
                        new
                        {
                            id = new Guid("564d6165-3c7b-4bae-b02d-ad0bae2dce7a"),
                            status = 3,
                            time = new DateTime(2025, 1, 14, 18, 30, 8, 576, DateTimeKind.Utc).AddTicks(3565),
                            transportationId = new Guid("f3f4c557-36a5-4be5-92fa-09ad9031bd84")
                        },
                        new
                        {
                            id = new Guid("16849ec1-2fef-4e80-8898-6b37930e8b10"),
                            status = 4,
                            time = new DateTime(2025, 1, 15, 18, 30, 8, 576, DateTimeKind.Utc).AddTicks(3567),
                            transportationId = new Guid("f3f4c557-36a5-4be5-92fa-09ad9031bd84")
                        },
                        new
                        {
                            id = new Guid("4514a21a-d41e-4cd4-90c5-00657196482c"),
                            status = 5,
                            time = new DateTime(2025, 1, 16, 18, 30, 8, 576, DateTimeKind.Utc).AddTicks(3568),
                            transportationId = new Guid("f3f4c557-36a5-4be5-92fa-09ad9031bd84")
                        },
                        new
                        {
                            id = new Guid("72533809-3865-4330-8e45-7c3d9a8b871e"),
                            status = 6,
                            time = new DateTime(2025, 1, 17, 17, 50, 8, 576, DateTimeKind.Utc).AddTicks(3570),
                            transportationId = new Guid("f3f4c557-36a5-4be5-92fa-09ad9031bd84")
                        });
                });

            modelBuilder.Entity("Logistics.Data.Account.Models.Shipper", b =>
                {
                    b.HasBaseType("Logistics.Data.Account.Models.User");

                    b.ToTable("Shippers");

                    b.HasData(
                        new
                        {
                            id = new Guid("fb17c769-149d-4e2c-b386-73aa6abde8ad"),
                            email = "shipper@gmail.com",
                            fullName = "Семенов Александр Никитич",
                            password = "240BE518FABD2724DDB6F04EEB1DA5967448D7E831C08C8FA822809F74C720A9",
                            phone = "+7 931 555 35 35",
                            role = 0
                        });
                });

            modelBuilder.Entity("Logistics.Data.Account.Models.Transporter", b =>
                {
                    b.HasBaseType("Logistics.Data.Account.Models.User");

                    b.Property<int?>("permanentResidence")
                        .HasColumnType("integer");

                    b.ToTable("Transporters");

                    b.HasData(
                        new
                        {
                            id = new Guid("015833d6-dbbf-405e-9479-8fe3ae959a28"),
                            email = "transporter@gmail.com",
                            fullName = "Петров Анатолий Степанович",
                            password = "BDD0E4C431DEF2F5CF7549034C0CB76B0F992F3991F0E6357B542F4B67DBE859",
                            phone = "+7 932 812 96 69",
                            role = 1,
                            permanentResidence = 0
                        });
                });

            modelBuilder.Entity("Logistics.Data.Account.Models.PendingEmail", b =>
                {
                    b.HasOne("Logistics.Data.Account.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("Logistics.Data.Account.Models.Truck", b =>
                {
                    b.HasOne("Logistics.Data.Account.Models.Transporter", null)
                        .WithOne("truck")
                        .HasForeignKey("Logistics.Data.Account.Models.Truck", "transporterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Logistics.Data.Account.Models.User", b =>
                {
                    b.OwnsOne("Logistics.Data.Common.DTOs.Responses.Company", "company", b1 =>
                        {
                            b1.Property<Guid>("Userid")
                                .HasColumnType("uuid");

                            b1.Property<string>("INN")
                                .HasColumnType("text")
                                .HasColumnName("INN");

                            b1.Property<string>("companyName")
                                .HasColumnType("text")
                                .HasColumnName("companyName");

                            b1.Property<int?>("organizationalForm")
                                .HasColumnType("integer")
                                .HasColumnName("organizationalForm");

                            b1.HasKey("Userid");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("Userid");

                            b1.HasData(
                                new
                                {
                                    Userid = new Guid("015833d6-dbbf-405e-9479-8fe3ae959a28"),
                                    INN = "345055094345",
                                    organizationalForm = 2
                                },
                                new
                                {
                                    Userid = new Guid("fb17c769-149d-4e2c-b386-73aa6abde8ad"),
                                    INN = "3450550943",
                                    companyName = "Herriot-Watt",
                                    organizationalForm = 0
                                });
                        });

                    b.Navigation("company")
                        .IsRequired();
                });

            modelBuilder.Entity("Logistics.Data.Documents.Models.DriverLicense", b =>
                {
                    b.HasOne("Logistics.Data.Account.Models.Transporter", "transporter")
                        .WithMany()
                        .HasForeignKey("transporterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Logistics.Data.Documents.Models.Scan", "scan", b1 =>
                        {
                            b1.Property<Guid>("DriverLicenseid")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("fileId")
                                .HasColumnType("uuid");

                            b1.Property<string>("fileName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("DriverLicenseid");

                            b1.ToTable("Licenses");

                            b1.WithOwner()
                                .HasForeignKey("DriverLicenseid");
                        });

                    b.Navigation("scan");

                    b.Navigation("transporter");
                });

            modelBuilder.Entity("Logistics.Data.Documents.Models.Passport", b =>
                {
                    b.HasOne("Logistics.Data.Account.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Logistics.Data.Documents.Models.Scan", "scan", b1 =>
                        {
                            b1.Property<Guid>("Passportid")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("fileId")
                                .HasColumnType("uuid");

                            b1.Property<string>("fileName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("Passportid");

                            b1.ToTable("Passports");

                            b1.WithOwner()
                                .HasForeignKey("Passportid");
                        });

                    b.Navigation("scan");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Logistics.Data.Requests.Models.RejectedRequest", b =>
                {
                    b.HasOne("Logistics.Data.Requests.Models.Request", null)
                        .WithMany()
                        .HasForeignKey("requestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Logistics.Data.Account.Models.Transporter", null)
                        .WithMany()
                        .HasForeignKey("transporterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Logistics.Data.Requests.Models.Request", b =>
                {
                    b.HasOne("Logistics.Data.Account.Models.Shipper", "shipper")
                        .WithMany()
                        .HasForeignKey("shipperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("shipper");
                });

            modelBuilder.Entity("Logistics.Data.Requests.Models.Shipment", b =>
                {
                    b.HasOne("Logistics.Data.Requests.Models.Request", null)
                        .WithOne("shipment")
                        .HasForeignKey("Logistics.Data.Requests.Models.Shipment", "requestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Logistics.Data.Transportations.Models.Review", b =>
                {
                    b.HasOne("Logistics.Data.Transportations.Models.Transportation", null)
                        .WithMany()
                        .HasForeignKey("transportationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Logistics.Data.Account.Models.User", null)
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Logistics.Data.Transportations.Models.Transportation", b =>
                {
                    b.HasOne("Logistics.Data.Requests.Models.Request", "request")
                        .WithOne("transportation")
                        .HasForeignKey("Logistics.Data.Transportations.Models.Transportation", "requestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Logistics.Data.Account.Models.Transporter", "transporter")
                        .WithMany()
                        .HasForeignKey("transporterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("request");

                    b.Navigation("transporter");
                });

            modelBuilder.Entity("Logistics.Data.Transportations.Models.TransportationStatusChange", b =>
                {
                    b.HasOne("Logistics.Data.Transportations.Models.Transportation", "transportation")
                        .WithMany()
                        .HasForeignKey("transportationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("transportation");
                });

            modelBuilder.Entity("Logistics.Data.Account.Models.Shipper", b =>
                {
                    b.HasOne("Logistics.Data.Account.Models.User", null)
                        .WithOne()
                        .HasForeignKey("Logistics.Data.Account.Models.Shipper", "id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Logistics.Data.Account.Models.Transporter", b =>
                {
                    b.HasOne("Logistics.Data.Account.Models.User", null)
                        .WithOne()
                        .HasForeignKey("Logistics.Data.Account.Models.Transporter", "id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Logistics.Data.Requests.Models.Request", b =>
                {
                    b.Navigation("shipment")
                        .IsRequired();

                    b.Navigation("transportation");
                });

            modelBuilder.Entity("Logistics.Data.Account.Models.Transporter", b =>
                {
                    b.Navigation("truck");
                });
#pragma warning restore 612, 618
        }
    }
}
